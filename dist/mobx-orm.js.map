{"version":3,"file":"mobx-orm.js","sources":["../src/filters.ts","../src/query-base.ts","../src/query.ts","../src/query-page.ts","../src/model.ts","../src/adapters/adapter.ts","../src/adapters/local.ts","../src/fields/id.ts","../src/fields/field.ts","../src/fields/foreign.ts","../src/fields/one.ts","../src/fields/many.ts"],"sourcesContent":["import { action, makeObservable, observable } from \"mobx\"\nimport Query from \"./query\" \n\n\nexport enum FilterType {\n    EQ, NOT_EQ,\n    IN, NOT_IN,\n    AND, OR,\n}\n\nexport class Filter {\n    readonly    field: string\n    @observable type : FilterType \n    @observable value: any\n                options: Query<any> // use it for UI when we need to show options for select\n\n    constructor(type: FilterType = null, field: string = null, value: any) {\n        this.type  = type \n        this.field = field\n        this.value = value\n        if (type === FilterType.IN && this.value === undefined) this.value = []\n        makeObservable(this)\n    }\n    @action setFromURI(uri: string) {\n        let search_params = new URLSearchParams(uri)\n        let value = search_params.get(this.getURIField()) \n        switch (this.type) {\n            case FilterType.EQ:\n                this.value = value  \n                break\n            case FilterType.IN:\n                this.value = value ? value.split(',') : [] \n                break\n            case FilterType.AND:\n                for(let child of this.value) {\n                    child.setFromURI(uri) \n                }\n                break\n            case FilterType.OR:\n            default:\n                return '' \n        }\n    }\n    getURIField(): string {\n        switch (this.type) {\n            case FilterType.EQ:\n                return `${this.field}__eq` \n            case FilterType.IN:\n                return `${this.field}__in`\n            case FilterType.AND:\n            case FilterType.OR:\n            default:\n                return '' \n        }\n    }\n    getURLSearchParams(): URLSearchParams{\n        let search_params = new URLSearchParams()\n        switch (this.type) {\n            case FilterType.EQ:\n                this.value && search_params.set(this.getURIField(), this.value)\n                break\n            case FilterType.IN:\n                this.value?.length && search_params.set(this.getURIField(), this.value)\n                break\n            case FilterType.AND:\n                for(let filter of this.value) {\n                    let child = filter.getURLSearchParams() \n                    child.forEach((value, key) => search_params.set(key, value))\n                }\n                break\n            case FilterType.OR:\n            default:\n        }\n        return search_params\n    }\n    is_match(obj: any) : boolean {\n        let path, value\n        switch (this.type) {\n            case FilterType.EQ:\n                if (this.value === undefined) return true\n                path = this.field.split('__')\n                value = obj \n                for(let field of path) {\n                    if (value === null) return false\n                    value = value[field] \n                    if (value === undefined) break\n                }\n                return value == this.value\n            case FilterType.IN:\n                if (this.value.length === 0) return true\n                path = this.field.split('__')\n                value = obj \n                for(let field of path) {\n                    if (value === null) return false\n                    value = value[field] \n                    if (value === undefined) break\n                }\n                for (let v of this.value) {\n                    if (v == value) return true\n                }\n                return false\n                // return this.value !== null && this.value.length ? this.value.includes(String(obj[this.field])) : true\n            case FilterType.AND:\n                for(let filter of this.value)\n                    if (!filter.is_match(obj))\n                        return false\n                return true \n            case FilterType.OR:\n                if (!this.value.length) return true\n                for(let filter of this.value)\n                    if (filter.is_match(obj))\n                        return true \n                return false \n            default:\n                // unknown type of filter == any obj is match\n                return true \n        }\n    }\n}\n\nexport function EQ(field: string, value: any = undefined) : Filter {\n    return new Filter(FilterType.EQ, field, value) \n}\n\nexport function IN(field: string, value: any[] = []) : Filter {\n    return new Filter(FilterType.IN, field, value) \n}\n\nexport function AND(...filters: Filter[]) : Filter {\n    return new Filter(FilterType.AND, null, filters) \n}\n\nexport function OR(...filters: Filter[]) : Filter {\n    return new Filter(FilterType.OR, null, filters) \n}\n","import { action, autorun, makeObservable, observable, reaction, runInAction } from \"mobx\"\nimport Adapter from \"./adapters/adapter\"\nimport { Model } from \"./model\"\nimport { Filter } from './filters'\n\nexport const ASC = true \nexport const DESC = false \nexport type ORDER_BY = Map<string, boolean>\n\n\nexport default abstract class Query<M extends Model> {\n\n    @observable filters     : Filter\n    @observable order_by    : ORDER_BY \n    @observable page        : number\n    @observable page_size   : number\n\n    @observable need_to_update: boolean\n\n    abstract get items()\n\n    get is_loading () { return this.__is_loading  }\n    get is_ready   () { return this.__is_ready    }\n    get error      () { return this.__error       }\n    \n\treadonly __base_cache: any\n\treadonly __adapter: Adapter<M>\n    @observable __items: M[] = []\n    @observable __is_loading  : boolean = false \n    @observable __is_ready    : boolean = false \n    @observable __error       : string = '' \n\n    __disposers         : (()=>void)[] = []\n    __disposer_objects  : {[field: string]: ()=>void} = {'test': ()=>{}}\n\n    constructor(adapter: Adapter<M>, base_cache: any, filters?: Filter, order_by?: ORDER_BY, page?: number, page_size?: number) {\n\t\tthis.__base_cache = base_cache\n\t\tthis.__adapter    = adapter\n        this.order_by = order_by ? order_by : new Map()\n        if (filters  ) this.filters   = filters\n        if (page\t ) this.page      = page\n        if (page_size) this.page_size = page_size\n        makeObservable(this)\n\n        this.__disposers.push(reaction(\n            () => { return { \n                filter          : this.filters?.getURLSearchParams(), \n                order_by        : this.order_by, \n                page            : this.page, \n                page_size       : this.page_size,\n             }},\n            () => { runInAction(() => this.need_to_update = true )}\n        ))\n    }\n\n    destroy() {\n        while(this.__disposers.length) {\n            this.__disposers.pop()()\n        }\n        for(let __id in this.__disposer_objects) {\n            this.__disposer_objects[__id]()\n            delete this.__disposer_objects[__id]\n        } \n    }\n\n    abstract __load(objs: M[])\n\n    // use it if everybody should know that the query data is updating\n    @action async load() {\n        this.__is_loading = true\n        try {\n            await this.shadowLoad()\n        }\n        finally {\n            runInAction(() => this.__is_loading = false)\n        }\n    }\n\n    // use it if nobody should know that you load data for the query\n    // for example you need to update the current data on the page and you don't want to show a spinner\n    @action async shadowLoad() {\n        try {\n            let objs = await this.__adapter.load(this.filters, this.order_by, this.page_size, this.page*this.page_size)\n            this.__load(objs)\n            runInAction(() => {\n                this.__is_ready = true\n                this.need_to_update = false \n            })\n        }\n        catch(e) {\n            runInAction(() => this.__error = e)\n            throw e\n        }\n    }\n\n    // use it if you need use promise instead of observe is_ready\n    ready(): Promise<Boolean> {\n        return new Promise((resolve, reject) => { \n            autorun((reaction) => {\n                if (this.__is_ready) {\n                    reaction.dispose()\n                    resolve(this.__is_ready) \n                }\n            })\n        })\n    }\n\n    // use it if you need use promise instead of observe is_loading\n    loading(): Promise<Boolean> {\n        return new Promise((resolve, reject) => { \n            autorun((reaction) => {\n                if (!this.__is_loading) {\n                    reaction.dispose()\n                    resolve(!this.__is_loading) \n                }\n            })\n        })\n    }\n}\n","import { autorun, computed, observe, reaction, runInAction } from 'mobx'\nimport { Model } from './model'\nimport Adapter from './adapters/adapter'\nimport QeuryBase, { ASC, DESC, ORDER_BY } from './query-base'\nimport { Filter } from './filters'\n\n/*\nReactive items:\n- delete from the cache -> delete from items\n- add to the cache \n    - the new obj is match the filters  -> add the obj to items\n- obj was changed \n    - не было но уже    попадание по фильтрам -> add the obj to items\n    -    было но уже не попадание по фильтрам -> remove the obj from items\n*/\n\nexport default class Query<M extends Model> extends QeuryBase<M> {\n\n    constructor(adapter: Adapter<M>, base_cache: any, filters?: Filter, order_by?: ORDER_BY) {\n        super(adapter, base_cache, filters, order_by)\n\n        // watch the cache for changes, and update items if needed\n        this.__disposers.push(observe(this.__base_cache, (change: any) => {\n            // if query is loading then ignore any changes from cache\n            if (this.__is_loading) return \n\n            if (change.type == 'add') {\n                this.__watch_obj(change.newValue)\n            }\n            if (change.type == \"delete\") {\n                let __id = change.name\n                let obj  = change.oldValue\n                this.__disposer_objects[__id]()\n                delete this.__disposer_objects[__id]\n                let i = this.__items.indexOf(obj)\n                if (i != -1)\n                    runInAction(() => {\n                        this.__items.splice(i, 1)\n                    })\n            }\n        }))\n\n        this.__disposers.push(reaction(\n            () => this.need_to_update,\n            (value) => {\n                if (value && !this.__is_loading)\n                    for(let [id, obj] of this.__base_cache) {\n                        this.__watch_obj(obj)\n                    }\n            }\n        ))\n\n        // ch all exist objects of model \n        for(let [id, obj] of this.__base_cache) {\n            this.__watch_obj(obj)\n        }\n    }\n\n    @computed\n    get items() { \n        let __items = this.__items.map(x=>x) // copy __items (not deep)\n        if (this.order_by.size) {\n            let compare = (a, b) => {\n                for(const [key, value] of this.order_by) {\n                    if (value === ASC) {\n                        if ((a[key] === undefined || a[key] === null) && (b[key] !== undefined && b[key] !== null)) return  1\n                        if ((b[key] === undefined || b[key] === null) && (a[key] !== undefined && a[key] !== null)) return -1\n                        if (a[key] < b[key]) return -1\n                        if (a[key] > b[key]) return  1\n                    }\n                    else {\n                        if ((a[key] === undefined || a[key] === null) && (b[key] !== undefined && b[key] !== null)) return -1\n                        if ((b[key] === undefined || b[key] === null) && (a[key] !== undefined && a[key] !== null)) return  1\n                        if (a[key] < b[key]) return  1\n                        if (a[key] > b[key]) return -1\n                    }\n                }\n                return 0\n            }\n            __items.sort(compare)\n        }\n        return __items \n    }\n\n    __load(objs: M[]) {\n        runInAction(() => { \n            this.__items.splice(0, this.__items.length)\n            this.__items.push(...objs)\n        })\n    }\n\n    __watch_obj(obj) {\n        if (this.__disposer_objects[obj.__id]) this.__disposer_objects[obj.__id]()\n        this.__disposer_objects[obj.__id] = autorun(\n            () => {\n                let should = !this.filters || this.filters.is_match(obj)\n                let i = this.__items.indexOf(obj)\n                // should be in the items and it is not in the items? add it to the items\n                if ( should && i == -1) runInAction(() => this.__items.push(obj))\n                // should not be in the items and it is in the items? remove it from the items\n                if (!should && i != -1) runInAction(() => this.__items.splice(i, 1))\n            }\n        )\n    }\n}\n","import { reaction, runInAction } from \"mobx\"\nimport { Model } from \"./model\"\nimport Adapter from \"./adapters/adapter\"\nimport QueryBase, { ORDER_BY } from './query-base'\nimport { Filter } from \"./filters\"\n\n\n// TODO: implement need_to_update\n\nexport default class Query<M extends Model> extends QueryBase<M> {\n\n    __load(objs: M[]) {\n        runInAction(() => { \n            this.__items.splice(0, this.__items.length)\n            this.__items.push(...objs)\n        })\n    }\n\n    get items() { return this.__items }\n    // TODO: add actions for QueryBase and QueryPage\n    // TODO: Query should know nothing about pages!\n    // @action setFilters(filters : any     ) { this.filters  = filters  }\n    // @action setOrderBy(order_by: string[]) { this.order_by = order_by }\n    // @action firstPage() { this.page = 0 }\n    // @action prevPage () { this.page = this.page < 0 ? this.page - 1 : 0 }\n    // @action nextPage () { this.page = this.page + 1 }\n    // @action lastPage () { this.page = 9999 } // TODO: need to know total row count\n    // @action setPageSize(page_size: number) { this.page_size = page_size }\n\n\n    constructor(adapter: Adapter<M>, base_cache: any, filters?: Filter, order_by?: ORDER_BY, page?: number, page_size?: number) {\n        super(adapter, base_cache, filters, order_by)\n        runInAction(() => {\n            if(this.page === undefined) this.page = 0\n            if(this.page_size === undefined) this.page_size = 50\n        })\n    }\n}\n","import { action, computed, makeObservable, observable, runInAction } from 'mobx'\nimport Adapter   from './adapters/adapter'\nimport Query     from './query'\nimport QueryPage from './query-page'\nimport { Filter } from './filters'\nimport { ORDER_BY } from './query-base'\n\n\nexport type RawObject = any \n\n// NOTE:\n// the __  prefix of naming - I borrow it from python. \n// It means don't use it but if you have no choice then you can use it.\n\nexport abstract class Model {\n    static __id_separator : string = '-'\n    // this static properties will be copied to real model in the model decorator\n    static __adapter  : Adapter<Model> \n    static __cache    : Map<string, Model>\n    // we have 3 types of fields\n    // - ids (cannot be changed, order of keys is important)\n    // - fields\n    // - relations (not exist on outside)\n    static __ids: Map<string, {\n            // can decorator be different?\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }>\n    static __fields       : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }\n    }\n    // relateions is a list of field only foreign, one or many types\n    static __relations : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any\n            // there is no serializer of deserializer because \n            // it is derivative and does not come from outside\n        }\n    }\n\n    // add obj to the cache\n    @action static inject(obj: Model) {\n        if (obj.__id === null)                    \n            throw new Error(`Object should have id!`)\n        if (this.__cache.has(obj.__id)) {\n            throw new Error(`Object with id \"${obj.__id}\" already exist in the cache of model: \"${this.name}\")`)\n        }\n        this.__cache.set(obj.__id, obj)\n    }\n\n    // remove obj from the cache\n    @action static eject(obj: Model) {\n        if (obj.__id === null)\n            return                   \n        if (!this.__cache.has(obj.__id)) \n            throw new Error(`Object with id \"${obj.__id}\" not exist in the cache of model: ${this.name}\")`)\n        this.__cache.delete(obj.__id)\n    }\n\n    // TODO: implement find method, it should load single object from Adapter\n    // and add find method to Adapter too\n    static async find(filters: Filter) : Promise<Model> {\n        return this.__adapter.find(filters) \n    }\n\n    static getQuery(filters?: Filter, order_by?: ORDER_BY): Query<Model>  {\n        return new Query<Model>(this.__adapter, this.__cache, filters, order_by)\n    }\n\n    static getQueryPage(filter?: Filter, order_by?: ORDER_BY, page?: number, page_size?: number): QueryPage<Model> {\n        return new QueryPage(this.__adapter, this.__cache, filter, order_by, page, page_size)\n    }\n\n    // return obj from the cache\n    static get(__id: string) {\n        return this.__cache.get(__id)\n    }\n\n    // TODO: what is it?\n    static filter(): Array<Model> {\n        let objs: Array<Model> = [] \n\n        return objs\n    }\n\n    @action static updateCache(raw_obj): Model {\n        let __id = this.__id(raw_obj)\n        let obj\n        if (this.__cache.has(__id)) {\n            runInAction(() => {\n                obj = this.__cache.get(__id)\n                obj.updateFromRaw(raw_obj)\n            })\n        }\n        else {\n            obj = new (<any>this)(raw_obj)\n        }\n        return obj\n    }\n\n    static clearCache() {\n        runInAction(() => {\n            // for clear cache we need just to set null into id fields\n            for (let obj of this.__cache.values()) {\n                for (let id_field_name of this.__ids.keys()) {\n                    obj[id_field_name] = null\n                }\n            }\n        })\n    }\n\n    static __id(obj, ids?) : string | null {\n        let id = '' \n        if (ids === undefined) ids = Array.from(this.__ids.keys()) \n        for (let id_field_name of ids) {\n            // if any id field is null then we should return null because id is not complite\n            if (obj[id_field_name] === null || obj[id_field_name] === undefined) \n                return null\n            id += `${obj[id_field_name]}${this.__id_separator}`\n        }\n        id = id.slice(0, -(this.__id_separator.length))\n        return id\n    }\n\n    __init_data: any   \n    __disposers = new Map()\n\n    constructor (...args) { }\n\n    @computed get __id() : string | null {\n        return this.model.__id(this)\n    }\n\n    get model() : any {\n        return (<any>this.constructor).__proto__\n    }\n\n    // it is raw_data + ids\n    get raw_obj() : any {\n        let raw_obj: any = this.raw_data\n        for(let id_field_name of this.model.__ids.keys()) {\n            if(this[id_field_name] !== undefined) {\n                raw_obj[id_field_name] = this[id_field_name]\n            }\n        }\n        raw_obj.__id = this.__id\n        return raw_obj\n    }\n\n    // data only from fields (no ids)\n    get raw_data() : any {\n        let raw_data: any = {}\n        for(let field_name in this.model.__fields) {\n            if(this[field_name] !== undefined) {\n                raw_data[field_name] = this[field_name]\n            }\n        }\n        return raw_data\n    }\n\n    get is_changed() : boolean {\n        let is_changed = false\n        for(let field_name in this.model.__fields) {\n            if (this[field_name] != this.__init_data[field_name]) {\n                is_changed = true\n            }\n        }\n        return is_changed \n    }\n\n    async create() { return await this.model.__adapter.create(this) }\n    async update() { return await this.model.__adapter.update(this) }\n    async delete() { return await this.model.__adapter.delete(this) }\n    async save  () { return this.__id === null ? this.create() : this.update() }\n\n    @action refresh_init_data() {\n        if(this.__init_data === undefined) this.__init_data = {}\n        for (let field_name in this.model.__fields) {\n            this.__init_data[field_name] = this[field_name]\n        }\n    }\n\n    @action updateFromRaw(raw_obj) {\n        // keys\n        for (let id_field_name of this.model.__ids.keys()) {\n            if (raw_obj[id_field_name] !== undefined && this[id_field_name] != raw_obj[id_field_name] ) {\n                this[id_field_name] = raw_obj[id_field_name]\n            }\n        }\n        // fields\n        for(let field_name in this.model.__fields) {\n            if (raw_obj[field_name] !== undefined) {\n                this[field_name] = raw_obj[field_name]\n            }\n        }\n    }\n\n}\n\n\n// Decorator\nexport function model(constructor) {\n    var original = constructor\n\n    original.__cache = observable(new Map())\n\n    // the new constructor\n    let f : any = function (...args) {\n        let c : any = class extends original { constructor (...args) { super(...args) } }\n            c.__proto__ = original\n\n        let obj   = new c()\n        let model = obj.model\n        makeObservable(obj)\n\n        if (model.__ids === undefined) \n            throw(`No one id field was declared on model ${model.name}`)\n\n        // apply id-fields decorators\n        for (let id_field_name of model.__ids.keys()) {\n            model.__ids.get(id_field_name).decorator(obj, id_field_name)\n        }\n        // apply fields decorators\n        for (let field_name in model.__fields) {\n            model.__fields[field_name].decorator(obj, field_name)\n        }\n        // apply __relations decorators\n        for (let field_name in model.__relations) {\n            model.__relations[field_name].decorator(obj, field_name)\n        }\n\n        runInAction(() => {\n            // update the object from args\n            if (args[0]) {\n                let raw_obj = args[0]\n                // id-fields\n                for (let id_field_name of model.__ids.keys()) {\n                    if (raw_obj[id_field_name] !== undefined) {\n                        obj[id_field_name] = raw_obj[id_field_name]\n                    }\n                }\n                // fields \n                for (let field_name in model.__fields) {\n                    if (raw_obj[field_name] !== undefined) {\n                        obj[field_name] = raw_obj[field_name]\n                    }\n                }\n            }\n        })\n        obj.refresh_init_data()\n        return obj\n    }\n\n    f.__proto__ = original\n    f.prototype = original.prototype   // copy prototype so intanceof operator still works\n    return f                      // return new constructor (will override original)\n}\n","import { Model, RawObject } from '../model'\n\n\nexport default abstract class  Adapter<M extends Model> {\n\n    // abstract getTotalCount: (where?) => Promise<number>\n    abstract __create(obj: RawObject): Promise<object>\n    abstract __update(obj: RawObject): Promise<object>\n    abstract __delete(obj: RawObject): Promise<object>\n    abstract __find(where): Promise<object>\n    abstract __load(where?, order_by?, limit?, offset?): Promise<RawObject[]>\n    abstract getTotalCount(where?): Promise<number>\n\n    readonly model: any\n\n    constructor(model: any) {\n        this.model = model \n    }\n\n    async create(obj: M) : Promise<M> {\n        let raw_obj = await this.__create(obj.raw_obj)\n        obj.updateFromRaw(raw_obj)\n        obj.refresh_init_data() // backend can return default values and they should be in __init_data\n        return obj\n    }\n\n    async update(obj: M) : Promise<M> {\n        let raw_obj = await this.__update(obj.raw_obj)\n        obj.updateFromRaw(raw_obj)\n        obj.refresh_init_data()\n        return obj\n    }\n\n    async delete(obj: M) : Promise<M> {\n        let raw_obj = await this.__delete(obj.raw_obj)\n        for(let id_field_name of this.model.__ids.keys())\n            obj[id_field_name] = null\n        return obj\n    }\n\n    /* Returns ONE object */\n    async find(where): Promise<M> {\n        let raw_obj = await this.__find(where)\n        return this.model.updateCache(raw_obj)\n    }\n\n    /* Returns MANY objects */\n    async load(where?, order_by?, limit?, offset?):Promise<M[]> {\n        let raw_objs = await this.__load(where, order_by, limit, offset)\n        let objs: M[] = []\n        for (let raw_obj of raw_objs) {\n            objs.push(this.model.updateCache(raw_obj))\n        }\n        return objs\n    }\n}\n","import { Model, RawObject } from '../model'\nimport Adapter  from './adapter'\n\n/*\nYou can use this adapter for mock data or for unit test\n*/\n\n\nexport let store: any = {}\n\n\nfunction timeout(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nexport default class LocalAdapter<M extends Model> extends Adapter<M> {\n\n    readonly store_name: string\n\n    // delays for simulate real usage, use it only for tests\n    delay: number \n\n    init_local_data(data: RawObject[]) {\n        let objs = {} \n        for(let obj of data) {\n            objs[this.model.__id(obj)] = obj\n        }\n        store[this.store_name] = objs\n    }\n\n    constructor(model: any, store_name?: string) {\n        super(model)\n        this.store_name = store_name ? store_name : model.__proto__.name\n        store[this.store_name] = {}\n    }\n\n    async __create(obj: RawObject) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n\n        if (obj.__id === null) {\n            // calculate and set new ID\n            let ids = [0]\n            for(let id of Object.keys(store[this.store_name])) {\n                ids.push(parseInt(id))\n            }\n            let max = Math.max.apply(null, ids)\n            for(let field_name_id of this.model.__ids.keys()) {\n                obj[field_name_id] = max + 1\n            }\n        }\n        obj.__id = this.model.__id(obj)\n        store[this.store_name][this.model.__id(obj)] = obj\n        return obj\n    }\n\n    async __update(obj: RawObject) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n        store[this.store_name][obj.__id] = obj\n        return obj\n    }\n\n    async __delete(obj: RawObject) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n        delete store[this.store_name][obj.__id]\n        return obj\n    }\n\n    async __find(where) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n        // TODO: apply where, and throw error if no obj or multi objs\n        let raw_obj = Object.values(store[this.store_name])[0]\n        return raw_obj\n    }\n\n    async __load (where?, order_by?, limit?, offset?) : Promise<RawObject[]> {\n        if (this.delay) await timeout(this.delay) \n        let raw_objs = []\n        // filter\n        if (where) {\n            for(let raw_obj of Object.values(store[this.store_name])) {\n\n            }\n        }\n        else {\n            raw_objs = Object.values(store[this.store_name])\n        }\n\n        // order_by (sort)\n        if (order_by) {\n            raw_objs = raw_objs.sort((obj_a, obj_b) => {\n                let res\n                for(let sort_by_field of order_by) {\n\n                }\n                return 0\n            })\n        }\n\n        // page\n        if (limit !== undefined && offset !== undefined) {\n            raw_objs = raw_objs.slice(offset, offset+limit)\n        }\n        return raw_objs \n    }\n\n    async getTotalCount(where?): Promise<number> {\n        let objs = []\n        // Object.values(store[this.store_name])\n        return objs.length\n    }\n}\n\n\n// model decorator\nexport function local() {\n    return (cls: any) => {\n        let adapter = new LocalAdapter(cls)\n        cls.__proto__.__adapter = adapter \n    }\n}\n\n// TODO: where example\n// let where = [\n//             [\"field_a\", \"==\", 10, \"and\", \"field_b == 20\"],\n//     \"or\",   [\"field_a\", \"<=\",  5, \"and\", \"field_b\", \"contain\", \"test\"]\n// ]\n","import { observable, observe, intercept, extendObservable } from 'mobx'\nimport { RawObject } from '../model'\n\n/*\n1. you can setup id only once!\nusing obj.id = x, new Obj({id: x}) or obj.save()\n\n2. save() has two behavior depend on id \n - id === undefined or null -> create object on remote storage and get it\n - id === some number       -> save object in remote storage \n\n3. if you want just load data to cache then you can use this \nnew Obj({id: x, ...})\n*/\n\nfunction field_ID (obj , field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // before changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && obj[field_name] !== null)\n            throw new Error(`You cannot change id field: ${field_name}. ${obj[field_name]} to ${change.newValue}`)\n        if (obj[field_name] !== null && change.newValue === null) {\n            try {\n                obj.model.eject(obj)\n            }\n            catch (err) {\n                let ignore_error = `Object with id \"${obj.__id}\" not exist in the model cache: ${obj.model.name}\")`\n                if (err.name !== ignore_error)\n                    throw err\n            }\n        }\n        return change\n    })\n\n    // after changes\n    observe(obj, field_name, (change) => {\n        // if id is complete\n        if (obj.__id !== null) \n            obj.model.inject(obj)\n    })\n\n}\n\n\nexport default function id(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.__ids === undefined) model.__ids = new Map()\n    model.__ids.set(field_name, { decorator: field_ID })\n}\n\nabstract class ModelX {\n    get raw_obj() : any {\n        return {}\n    }\n}\n\nfunction ModelExt<T>() {\n  abstract class Model extends ModelX{\n    /* static methods */\n    public static list: T[] = [];\n    public static async fetch(): Promise<T[]> {\n      return null!;\n    }\n    /*  instance methods */\n    public save(): Promise<T> {\n      return null!\n    }\n  }\n  return Model;\n}\nclass User extends ModelExt<User>() {\n}\nlet users: Promise<User[]> = User.fetch()\n\n\nabstract class  Adapter<M extends ModelX> {\n\n    // abstract getTotalCount: (where?) => Promise<number>\n    abstract __create(obj: RawObject): Promise<object>\n    abstract __update(obj: RawObject): Promise<object>\n    abstract __delete(obj: RawObject): Promise<object>\n    abstract __find(where): Promise<object>\n    abstract __load(where?, order_by?, limit?, offset?): Promise<RawObject[]>\n    abstract getTotalCount(where?): Promise<number>\n\n    readonly model: any\n\n    constructor(model: any) {\n        this.model = model \n    }\n\n    async create(obj: M) : Promise<M> {\n        let raw_obj = await this.__create(obj.raw_obj)\n        // obj.updateFromRaw(raw_obj)\n        // obj.refresh_init_data() // backend can return default values and they should be in __init_data\n        return obj\n    }\n}","import { extendObservable } from 'mobx'\n\n\n\nexport function field_field(obj, field_name) {\n    // make observable and set default value\n    extendObservable(obj, { [field_name]: obj[field_name] })\n}\n\n\nexport default function field(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.__fields === undefined) model.__fields = {}\n\n    model.__fields[field_name] = { decorator: field_field }  // register field \n}\n","import {intercept, observe, extendObservable, reaction} from 'mobx'\n\n\nfunction field_foreign(obj, field_name) {\n    let edit_mode = false\n    let settings = obj.model.__relations[field_name].settings\n    let foreign_model     = settings.foreign_model\n    let foreign_ids_names = settings.foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    reaction(\n        // watch on foreign cache for foreign object\n        () => {\n            let __id = foreign_model.__id(obj, foreign_ids_names)\n            return __id ? foreign_model.__cache.get(__id) : null\n        },\n        // update foreign field\n        (foreign_obj, prev, reaction) => {\n            obj[field_name] = foreign_obj ? foreign_obj : null \n        }\n    )\n\n    // Setter\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model == foreign_model)) {\n            throw new Error(`You can set only instance of \"${foreign_model.name}\" or null`)\n        }\n        return change\n    })\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let new_foreign_obj = change.newValue\n        let old_foreign_obj = change.oldValue\n\n        if (new_foreign_obj === old_foreign_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> A.b_id -> A.b -> A.b_id ...\n\n        edit_mode = true\n        try {\n            if (change.newValue === null) {\n                // if foreign set to null then reset ids on the obj\n                for (let id_name of foreign_ids_names) {\n                    obj[id_name] = null \n                }\n            }\n            else {\n                // if foreign set to obj then update ids from the obj's ids\n                let obj_ids: any = Array.from(change.newValue.model.__ids.keys())\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    // do not touch if it the same\n                    if (obj[foreign_ids_names[i]] != change.newValue[obj_ids[i]])\n                        obj[foreign_ids_names[i]]  = change.newValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // rollback changes!\n            if (change.oldValue === null) {\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = null \n                }\n            }\n            else {\n                let obj_ids = change.oldValue.model.__ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n            throw e\n        }\n\n        // if foreign have the one then update the one\n        if (settings.one) {\n            if (old_foreign_obj) {\n                old_foreign_obj[settings.one] = null\n            }\n            if (new_foreign_obj) {\n                new_foreign_obj[settings.one] = obj \n            }\n        }\n    })\n}\n\nexport default function foreign(foreign_model: any, ...foreign_ids_names: string[]) {\n    foreign_model = foreign_model.__proto__ // TODO: band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.constructor\n        if (model.__relations === undefined) model.__relations = {}\n        // register field \n        model.__relations[field_name] = { \n            decorator: field_foreign,\n            settings: {\n                foreign_model: foreign_model,\n                // if it is empty then try auto detect it (it works only with single id) \n                foreign_ids_names: foreign_ids_names.length ? foreign_ids_names : [`${field_name}_id`]\n            } \n        } \n    }\n}\n","import { intercept, observe, extendObservable, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_one(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.__relations[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.__relations[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model === remote_model))\n                throw new Error(`You can set only instance of \"${remote_model.name}\" or null`)\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let old_remote_obj = change.oldValue\n        let new_remote_obj = change.newValue\n\n        if (new_remote_obj === old_remote_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> B.a_id -> A.b -> B.a_id ...\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote obj\n            if (old_remote_obj) {\n                for (let id_name of remote_foreign_ids_name) {\n                    old_remote_obj[id_name] = null \n                }\n            }\n            // set foreign ids on the remote obj \n            if (new_remote_obj) {\n                let obj_ids: any = Array.from(obj.model.__ids.keys())\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]] = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\n\nexport default function one(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    remote_model = remote_model.__proto__ // band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.__relations === undefined) model.__relations = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.__relations[field_name] = { \n            decorator: field_one,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.__cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.__disposers.set(`one ${field_name}` ,autorun(() => {\n                        let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            // TODO: is it not bad?\n                            // if (obj[field_name])\n                            //     // TODO better name of error\n                            //     // TODO add test for this case\n                            //     throw ('One: bad')\n                            runInAction(() => { obj[field_name] = remote_obj })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.__disposers.get(`one ${field_name}`)) {\n                        remote_obj.__disposers.get(`one ${field_name}`)()\n                        remote_obj.__disposers.delete(`one ${field_name}`)\n                    }\n                    let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) \n                        runInAction(() => { obj[field_name] = null })\n                    break\n            }\n        })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_many(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.__relations[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.__relations[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: []\n    })\n\n    // 1. checks before set new changes\n    intercept(obj[field_name], (change: any) => {\n        // TODO\n        // if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor === remote_model.__proto__))\n        //         throw new Error(`You can set only instance of \"${remote_model.__proto__.name}\" or null`)\n\n        // TODO: if we push exist obj then ignore it? and not duplicate\n        // TODO: create a test for this case \n        // remote obj can be in the many \n        // for (let new_remote_obj of change.added) {\n        //     const i = obj[field_name].indexOf(new_remote_obj)\n        //     if (i == -1)\n        //         throw new Error(`\"${new_remote_obj.model.name}\" id:\"${new_remote_obj.__id}\" alredy in many \"${obj.model.name}\" id:\"${field_name}\"`)\n        // }\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj[field_name], (change:any) => {\n        if (change.type !== 'splice')\n            return \n\n        let old_remote_objs = change.removed\n        let new_remote_objs = change.added\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote objs\n            for(let old_remote_obj of old_remote_objs)\n                for (let id_name of remote_foreign_ids_name)\n                    old_remote_obj[id_name] = null \n            // set foreign ids on the remote objs \n            let obj_ids: any = Array.from(obj.model.__ids.keys())\n            for(let new_remote_obj of new_remote_objs) {\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]]  = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\nexport default function many(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.__relations === undefined) model.__relations = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.__relations[field_name] = { \n            decorator: field_many,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.__cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.__disposers.set(`many ${field_name}` ,autorun(() => {\n                        let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            const i = obj[field_name].indexOf(remote_obj)\n                            if (i == -1)\n                                runInAction(() => { obj[field_name].push(remote_obj) })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.__disposers.get(`many ${field_name}`)) {\n                        remote_obj.__disposers.get(`many ${field_name}`)()\n                        remote_obj.__disposers.delete(`many ${field_name}`)\n                    }\n                    let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) {\n                        const i = obj[field_name].indexOf(remote_obj)\n                        if (i > -1)\n                            runInAction(() => { obj[field_name].splice(i, 1); })\n                    } \n                    break\n            }\n        })\n    }\n}"],"names":["FilterType","makeObservable","observable","action","Query","reaction","runInAction","autorun","QeuryBase","observe","computed","QueryBase","QueryPage","extendObservable","intercept"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIYA,gCAIX;IAJD,CAAA,UAAY,UAAU,EAAA;IAClB,IAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAE,CAAA;IAAE,IAAA,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM,CAAA;IACV,IAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAE,CAAA;IAAE,IAAA,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM,CAAA;IACV,IAAA,UAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAG,CAAA;IAAE,IAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAE,CAAA;IACX,CAAC,EAJWA,kBAAU,KAAVA,kBAAU,GAIrB,EAAA,CAAA,CAAA,CAAA;UAEY,MAAM,CAAA;IAMf,IAAA,WAAA,CAAY,OAAmB,IAAI,EAAE,KAAgB,GAAA,IAAI,EAAE,KAAU,EAAA;IALrE,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;;IAAyB,SAAA,CAAA,CAAA;IACb,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,MAAA,EAAA;;;;;IAAiB,SAAA,CAAA,CAAA;IACjB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;;IAAU,SAAA,CAAA,CAAA;IACV,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;;;;;IAAmB,SAAA,CAAA,CAAA;IAG3B,QAAA,IAAI,CAAC,IAAI,GAAI,IAAI,CAAA;IACjB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IAClB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;YAClB,IAAI,IAAI,KAAKA,kBAAU,CAAC,EAAE,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS;IAAE,YAAA,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;YACvEC,mBAAc,CAAC,IAAI,CAAC,CAAA;SACvB;IACO,IAAA,UAAU,CAAC,GAAW,EAAA;IAC1B,QAAA,IAAI,aAAa,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,CAAA;YAC5C,IAAI,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;YACjD,QAAQ,IAAI,CAAC,IAAI;gBACb,KAAKD,kBAAU,CAAC,EAAE;IACd,gBAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;oBAClB,MAAK;gBACT,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;oBAC1C,MAAK;gBACT,KAAKA,kBAAU,CAAC,GAAG;IACf,gBAAA,KAAI,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;IACzB,oBAAA,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;IACxB,iBAAA;oBACD,MAAK;gBACT,KAAKA,kBAAU,CAAC,EAAE,CAAC;IACnB,YAAA;IACI,gBAAA,OAAO,EAAE,CAAA;IAChB,SAAA;SACJ;QACD,WAAW,GAAA;YACP,QAAQ,IAAI,CAAC,IAAI;gBACb,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,OAAO,CAAG,EAAA,IAAI,CAAC,KAAK,MAAM,CAAA;gBAC9B,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,OAAO,CAAG,EAAA,IAAI,CAAC,KAAK,MAAM,CAAA;gBAC9B,KAAKA,kBAAU,CAAC,GAAG,CAAC;gBACpB,KAAKA,kBAAU,CAAC,EAAE,CAAC;IACnB,YAAA;IACI,gBAAA,OAAO,EAAE,CAAA;IAChB,SAAA;SACJ;QACD,kBAAkB,GAAA;;IACd,QAAA,IAAI,aAAa,GAAG,IAAI,eAAe,EAAE,CAAA;YACzC,QAAQ,IAAI,CAAC,IAAI;gBACb,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;oBAC/D,MAAK;gBACT,KAAKA,kBAAU,CAAC,EAAE;oBACd,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,KAAI,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;oBACvE,MAAK;gBACT,KAAKA,kBAAU,CAAC,GAAG;IACf,gBAAA,KAAI,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;IAC1B,oBAAA,IAAI,KAAK,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAA;IACvC,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAA;IAC/D,iBAAA;oBACD,MAAK;gBACT,KAAKA,kBAAU,CAAC,EAAE,CAAC;IAEtB,SAAA;IACD,QAAA,OAAO,aAAa,CAAA;SACvB;IACD,IAAA,QAAQ,CAAC,GAAQ,EAAA;YACb,IAAI,IAAI,EAAE,KAAK,CAAA;YACf,QAAQ,IAAI,CAAC,IAAI;gBACb,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS;IAAE,oBAAA,OAAO,IAAI,CAAA;oBACzC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;oBAC7B,KAAK,GAAG,GAAG,CAAA;IACX,gBAAA,KAAI,IAAI,KAAK,IAAI,IAAI,EAAE;wBACnB,IAAI,KAAK,KAAK,IAAI;IAAE,wBAAA,OAAO,KAAK,CAAA;IAChC,oBAAA,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;wBACpB,IAAI,KAAK,KAAK,SAAS;4BAAE,MAAK;IACjC,iBAAA;IACD,gBAAA,OAAO,KAAK,IAAI,IAAI,CAAC,KAAK,CAAA;gBAC9B,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;IAAE,oBAAA,OAAO,IAAI,CAAA;oBACxC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;oBAC7B,KAAK,GAAG,GAAG,CAAA;IACX,gBAAA,KAAI,IAAI,KAAK,IAAI,IAAI,EAAE;wBACnB,IAAI,KAAK,KAAK,IAAI;IAAE,wBAAA,OAAO,KAAK,CAAA;IAChC,oBAAA,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;wBACpB,IAAI,KAAK,KAAK,SAAS;4BAAE,MAAK;IACjC,iBAAA;IACD,gBAAA,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;wBACtB,IAAI,CAAC,IAAI,KAAK;IAAE,wBAAA,OAAO,IAAI,CAAA;IAC9B,iBAAA;IACD,gBAAA,OAAO,KAAK,CAAA;;gBAEhB,KAAKA,kBAAU,CAAC,GAAG;IACf,gBAAA,KAAI,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK;IACxB,oBAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;IACrB,wBAAA,OAAO,KAAK,CAAA;IACpB,gBAAA,OAAO,IAAI,CAAA;gBACf,KAAKA,kBAAU,CAAC,EAAE;IACd,gBAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;IAAE,oBAAA,OAAO,IAAI,CAAA;IACnC,gBAAA,KAAI,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK;IACxB,oBAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;IACpB,wBAAA,OAAO,IAAI,CAAA;IACnB,gBAAA,OAAO,KAAK,CAAA;IAChB,YAAA;;IAEI,gBAAA,OAAO,IAAI,CAAA;IAClB,SAAA;SACJ;IACJ,CAAA;IA1Ge,UAAA,CAAA;QAAXE,eAAU;;IAAkB,CAAA,EAAA,MAAA,CAAA,SAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACjB,UAAA,CAAA;QAAXA,eAAU;;IAAW,CAAA,EAAA,MAAA,CAAA,SAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAUd,UAAA,CAAA;QAAPC,WAAM;;;;IAmBN,CAAA,EAAA,MAAA,CAAA,SAAA,EAAA,YAAA,EAAA,IAAA,CAAA,CAAA;aA8EW,EAAE,CAAC,KAAa,EAAE,QAAa,SAAS,EAAA;QACpD,OAAO,IAAI,MAAM,CAACH,kBAAU,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;IAClD,CAAC;aAEe,EAAE,CAAC,KAAa,EAAE,QAAe,EAAE,EAAA;QAC/C,OAAO,IAAI,MAAM,CAACA,kBAAU,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;IAClD,CAAC;IAEe,SAAA,GAAG,CAAC,GAAG,OAAiB,EAAA;QACpC,OAAO,IAAI,MAAM,CAACA,kBAAU,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IACpD,CAAC;IAEe,SAAA,EAAE,CAAC,GAAG,OAAiB,EAAA;QACnC,OAAO,IAAI,MAAM,CAACA,kBAAU,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IACnD;;ACjIO,UAAM,GAAG,GAAG,KAAI;AAChB,UAAM,IAAI,GAAG,MAAK;IAIX,MAAgBI,OAAK,CAAA;QAyB/B,WAAY,CAAA,OAAmB,EAAE,UAAe,EAAE,OAAgB,EAAE,QAAmB,EAAE,IAAa,EAAE,SAAkB,EAAA;IAvB9G,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;;;;;IAAoB,SAAA,CAAA,CAAA;IACpB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,UAAA,EAAA;;;;;IAAsB,SAAA,CAAA,CAAA;IACtB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,MAAA,EAAA;;;;;IAAoB,SAAA,CAAA,CAAA;IACpB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;;;;;IAAoB,SAAA,CAAA,CAAA;IAEpB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;;;;;IAAuB,SAAA,CAAA,CAAA;IAQtC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,EAAA;;;;;IAA0B,SAAA,CAAA,CAAA;IAC1B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;;;;;IAA8B,SAAA,CAAA,CAAA;IACf,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;;;;uBAAe,EAAE;IAAA,SAAA,CAAA,CAAA;IACjB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,EAAA;;;;uBAA0B,KAAK;IAAA,SAAA,CAAA,CAAA;IAC/B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,YAAA,EAAA;;;;uBAA0B,KAAK;IAAA,SAAA,CAAA,CAAA;IAC/B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,SAAA,EAAA;;;;uBAAyB,EAAE;IAAA,SAAA,CAAA,CAAA;IAEvC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,aAAA,EAAA;;;;uBAAqC,EAAE;IAAA,SAAA,CAAA,CAAA;IACvC,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,oBAAA,EAAA;;;;IAAoD,YAAA,KAAA,EAAA,EAAC,MAAM,EAAE,MAAI,GAAE,EAAC;IAAA,SAAA,CAAA,CAAA;IAGtE,QAAA,IAAI,CAAC,YAAY,GAAG,UAAU,CAAA;IAC9B,QAAA,IAAI,CAAC,SAAS,GAAM,OAAO,CAAA;IACrB,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAA;IAC/C,QAAA,IAAI,OAAO;IAAI,YAAA,IAAI,CAAC,OAAO,GAAK,OAAO,CAAA;IACvC,QAAA,IAAI,IAAI;IAAI,YAAA,IAAI,CAAC,IAAI,GAAQ,IAAI,CAAA;IACjC,QAAA,IAAI,SAAS;IAAE,YAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;YACzCH,mBAAc,CAAC,IAAI,CAAC,CAAA;YAEpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAACI,aAAQ,CAC1B,MAAK;;gBAAG,OAAO;IACX,gBAAA,MAAM,EAAY,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,kBAAkB,EAAE;oBACpD,QAAQ,EAAU,IAAI,CAAC,QAAQ;oBAC/B,IAAI,EAAc,IAAI,CAAC,IAAI;oBAC3B,SAAS,EAAS,IAAI,CAAC,SAAS;iBAClC,CAAA;aAAC,EACH,MAAK,EAAGC,gBAAW,CAAC,MAAM,IAAI,CAAC,cAAc,GAAG,IAAI,CAAE,CAAA,EAAC,CAC1D,CAAC,CAAA;SACL;QAhCD,IAAI,UAAU,KAAM,OAAO,IAAI,CAAC,YAAY,CAAA,EAAG;QAC/C,IAAI,QAAQ,KAAQ,OAAO,IAAI,CAAC,UAAU,CAAA,EAAK;QAC/C,IAAI,KAAK,KAAW,OAAO,IAAI,CAAC,OAAO,CAAA,EAAQ;QAgC/C,OAAO,GAAA;IACH,QAAA,OAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;IAC3B,YAAA,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAA;IAC3B,SAAA;IACD,QAAA,KAAI,IAAI,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE;IACrC,YAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAA;IAC/B,YAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;IACvC,SAAA;SACJ;;IAKO,IAAA,MAAM,IAAI,GAAA;IACd,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;YACxB,IAAI;IACA,YAAA,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;IAC1B,SAAA;IACO,gBAAA;gBACJA,gBAAW,CAAC,MAAM,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAA;IAC/C,SAAA;SACJ;;;IAIO,IAAA,MAAM,UAAU,GAAA;YACpB,IAAI;IACA,YAAA,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC3G,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;gBACjBA,gBAAW,CAAC,MAAK;IACb,gBAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;IACtB,gBAAA,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;IAC/B,aAAC,CAAC,CAAA;IACL,SAAA;IACD,QAAA,OAAM,CAAC,EAAE;gBACLA,gBAAW,CAAC,MAAM,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAA;IACnC,YAAA,MAAM,CAAC,CAAA;IACV,SAAA;SACJ;;QAGD,KAAK,GAAA;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;IACnC,YAAAC,YAAO,CAAC,CAAC,QAAQ,KAAI;oBACjB,IAAI,IAAI,CAAC,UAAU,EAAE;wBACjB,QAAQ,CAAC,OAAO,EAAE,CAAA;IAClB,oBAAA,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAC3B,iBAAA;IACL,aAAC,CAAC,CAAA;IACN,SAAC,CAAC,CAAA;SACL;;QAGD,OAAO,GAAA;YACH,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;IACnC,YAAAA,YAAO,CAAC,CAAC,QAAQ,KAAI;IACjB,gBAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;wBACpB,QAAQ,CAAC,OAAO,EAAE,CAAA;IAClB,oBAAA,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IAC9B,iBAAA;IACL,aAAC,CAAC,CAAA;IACN,SAAC,CAAC,CAAA;SACL;IACJ,CAAA;IA1Ge,UAAA,CAAA;QAAXL,eAAU;kCAAe,MAAM,CAAA;IAAA,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACpB,UAAA,CAAA;QAAXF,eAAU;;IAAuB,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACtB,UAAA,CAAA;QAAXF,eAAU;;IAAqB,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACpB,UAAA,CAAA;QAAXF,eAAU;;IAAqB,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAEpB,UAAA,CAAA;QAAXF,eAAU;;IAAwB,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAUvB,UAAA,CAAA;QAAXF,eAAU;;IAAkB,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IACjB,UAAA,CAAA;QAAXF,eAAU;;IAAgC,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAC/B,UAAA,CAAA;QAAXF,eAAU;;IAAgC,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAC/B,UAAA,CAAA;QAAXF,eAAU;;IAA4B,CAAA,EAAAE,OAAA,CAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;IAsC/B,UAAA,CAAA;QAAPD,WAAM;;;;IAQN,CAAA,EAAAC,OAAA,CAAA,SAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA;IAIO,UAAA,CAAA;QAAPD,WAAM;;;;IAaN,CAAA,EAAAC,OAAA,CAAA,SAAA,EAAA,YAAA,EAAA,IAAA,CAAA;;ICvFL;;;;;;;;IAQE;IAEmB,MAAAA,OAAuB,SAAQI,OAAY,CAAA;IAE5D,IAAA,WAAA,CAAY,OAAmB,EAAE,UAAe,EAAE,OAAgB,EAAE,QAAmB,EAAA;YACnF,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;;IAG7C,QAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAACC,YAAO,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,MAAW,KAAI;;gBAE7D,IAAI,IAAI,CAAC,YAAY;oBAAE,OAAM;IAE7B,YAAA,IAAI,MAAM,CAAC,IAAI,IAAI,KAAK,EAAE;IACtB,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;IACpC,aAAA;IACD,YAAA,IAAI,MAAM,CAAC,IAAI,IAAI,QAAQ,EAAE;IACzB,gBAAA,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;IACtB,gBAAA,IAAI,GAAG,GAAI,MAAM,CAAC,QAAQ,CAAA;IAC1B,gBAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAA;IAC/B,gBAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;oBACpC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;oBACjC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACPH,gBAAW,CAAC,MAAK;4BACb,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAC7B,qBAAC,CAAC,CAAA;IACT,aAAA;aACJ,CAAC,CAAC,CAAA;IAEH,QAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAACD,aAAQ,CAC1B,MAAM,IAAI,CAAC,cAAc,EACzB,CAAC,KAAK,KAAI;IACN,YAAA,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY;oBAC3B,KAAI,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;IACpC,oBAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;IACxB,iBAAA;aACR,CACJ,CAAC,CAAA;;YAGF,KAAI,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;IACpC,YAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;IACxB,SAAA;SACJ;IAGD,IAAA,IAAI,KAAK,GAAA;IACL,QAAA,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA;IACpC,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IACpB,YAAA,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,KAAI;oBACnB,KAAI,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACrC,IAAI,KAAK,KAAK,GAAG,EAAE;IACf,wBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;IAAE,4BAAA,OAAQ,CAAC,CAAA;IACrG,wBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;gCAAE,OAAO,CAAC,CAAC,CAAA;4BACrG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;gCAAE,OAAO,CAAC,CAAC,CAAA;4BAC9B,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAAE,4BAAA,OAAQ,CAAC,CAAA;IACjC,qBAAA;IACI,yBAAA;IACD,wBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;gCAAE,OAAO,CAAC,CAAC,CAAA;IACrG,wBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;IAAE,4BAAA,OAAQ,CAAC,CAAA;4BACrG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAAE,4BAAA,OAAQ,CAAC,CAAA;4BAC9B,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;gCAAE,OAAO,CAAC,CAAC,CAAA;IACjC,qBAAA;IACJ,iBAAA;IACD,gBAAA,OAAO,CAAC,CAAA;IACZ,aAAC,CAAA;IACD,YAAA,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACxB,SAAA;IACD,QAAA,OAAO,OAAO,CAAA;SACjB;IAED,IAAA,MAAM,CAAC,IAAS,EAAA;YACZC,gBAAW,CAAC,MAAK;IACb,YAAA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;gBAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAA;IAC9B,SAAC,CAAC,CAAA;SACL;IAED,IAAA,WAAW,CAAC,GAAG,EAAA;IACX,QAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC;gBAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAA;YAC1E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGC,YAAO,CACvC,MAAK;IACD,YAAA,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;gBACxD,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;;IAEjC,YAAA,IAAK,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC;IAAE,gBAAAD,gBAAW,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;;IAEjE,YAAA,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC;IAAE,gBAAAA,gBAAW,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACxE,SAAC,CACJ,CAAA;SACJ;IACJ,CAAA;IA7CG,UAAA,CAAA;QADCI,aAAQ;;;IAwBR,CAAA,EAAAN,OAAA,CAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA;;IC3EL;IAEqB,MAAA,KAAuB,SAAQO,OAAY,CAAA;IAE5D,IAAA,MAAM,CAAC,IAAS,EAAA;YACZL,gBAAW,CAAC,MAAK;IACb,YAAA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;gBAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAA;IAC9B,SAAC,CAAC,CAAA;SACL;QAED,IAAI,KAAK,KAAK,OAAO,IAAI,CAAC,OAAO,CAAA,EAAE;;;;;;;;;;QAYnC,WAAY,CAAA,OAAmB,EAAE,UAAe,EAAE,OAAgB,EAAE,QAAmB,EAAE,IAAa,EAAE,SAAkB,EAAA;YACtH,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;YAC7CA,gBAAW,CAAC,MAAK;IACb,YAAA,IAAG,IAAI,CAAC,IAAI,KAAK,SAAS;IAAE,gBAAA,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;IACzC,YAAA,IAAG,IAAI,CAAC,SAAS,KAAK,SAAS;IAAE,gBAAA,IAAI,CAAC,SAAS,GAAG,EAAE,CAAA;IACxD,SAAC,CAAC,CAAA;SACL;IACJ;;IC3BD;IACA;IACA;UAEsB,KAAK,CAAA;IAyHvB,IAAA,WAAA,CAAa,GAAG,IAAI,EAAA;IAHpB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,aAAA,EAAA;;;;;IAAgB,SAAA,CAAA,CAAA;IAChB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,aAAA,EAAA;;;;IAAc,YAAA,KAAA,EAAA,IAAI,GAAG,EAAE;IAAA,SAAA,CAAA,CAAA;SAEE;;QAtFjB,OAAO,MAAM,CAAC,GAAU,EAAA;IAC5B,QAAA,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI;IACjB,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,sBAAA,CAAwB,CAAC,CAAA;YAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IAC5B,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,gBAAA,EAAmB,GAAG,CAAC,IAAI,CAAA,wCAAA,EAA2C,IAAI,CAAC,IAAI,CAAA,EAAA,CAAI,CAAC,CAAA;IACvG,SAAA;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;SAClC;;QAGO,OAAO,KAAK,CAAC,GAAU,EAAA;IAC3B,QAAA,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI;gBACjB,OAAM;YACV,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;IAC3B,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,gBAAA,EAAmB,GAAG,CAAC,IAAI,CAAA,mCAAA,EAAsC,IAAI,CAAC,IAAI,CAAA,EAAA,CAAI,CAAC,CAAA;YACnG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;SAChC;;;IAID,IAAA,aAAa,IAAI,CAAC,OAAe,EAAA;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;SACtC;IAED,IAAA,OAAO,QAAQ,CAAC,OAAgB,EAAE,QAAmB,EAAA;IACjD,QAAA,OAAO,IAAIF,OAAK,CAAQ,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;SAC3E;QAED,OAAO,YAAY,CAAC,MAAe,EAAE,QAAmB,EAAE,IAAa,EAAE,SAAkB,EAAA;IACvF,QAAA,OAAO,IAAIQ,KAAS,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;SACxF;;QAGD,OAAO,GAAG,CAAC,IAAY,EAAA;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;SAChC;;IAGD,IAAA,OAAO,MAAM,GAAA;YACT,IAAI,IAAI,GAAiB,EAAE,CAAA;IAE3B,QAAA,OAAO,IAAI,CAAA;SACd;QAEO,OAAO,WAAW,CAAC,OAAO,EAAA;YAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC7B,QAAA,IAAI,GAAG,CAAA;YACP,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACxBN,gBAAW,CAAC,MAAK;oBACb,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAC5B,gBAAA,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;IAC9B,aAAC,CAAC,CAAA;IACL,SAAA;IACI,aAAA;IACD,YAAA,GAAG,GAAG,IAAU,IAAK,CAAC,OAAO,CAAC,CAAA;IACjC,SAAA;IACD,QAAA,OAAO,GAAG,CAAA;SACb;IAED,IAAA,OAAO,UAAU,GAAA;YACbA,gBAAW,CAAC,MAAK;;gBAEb,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE;oBACnC,KAAK,IAAI,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;IACzC,oBAAA,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,CAAA;IAC5B,iBAAA;IACJ,aAAA;IACL,SAAC,CAAC,CAAA;SACL;IAED,IAAA,OAAO,IAAI,CAAC,GAAG,EAAE,GAAI,EAAA;YACjB,IAAI,EAAE,GAAG,EAAE,CAAA;YACX,IAAI,GAAG,KAAK,SAAS;IAAE,YAAA,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;IAC1D,QAAA,KAAK,IAAI,aAAa,IAAI,GAAG,EAAE;;IAE3B,YAAA,IAAI,GAAG,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI,GAAG,CAAC,aAAa,CAAC,KAAK,SAAS;IAC/D,gBAAA,OAAO,IAAI,CAAA;gBACf,EAAE,IAAI,CAAG,EAAA,GAAG,CAAC,aAAa,CAAC,CAAA,EAAG,IAAI,CAAC,cAAc,CAAA,CAAE,CAAA;IACtD,SAAA;IACD,QAAA,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAA;IAC/C,QAAA,OAAO,EAAE,CAAA;SACZ;IAOS,IAAA,IAAI,IAAI,GAAA;YACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SAC/B;IAED,IAAA,IAAI,KAAK,GAAA;IACL,QAAA,OAAa,IAAI,CAAC,WAAY,CAAC,SAAS,CAAA;SAC3C;;IAGD,IAAA,IAAI,OAAO,GAAA;IACP,QAAA,IAAI,OAAO,GAAQ,IAAI,CAAC,QAAQ,CAAA;YAChC,KAAI,IAAI,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;IAC9C,YAAA,IAAG,IAAI,CAAC,aAAa,CAAC,KAAK,SAAS,EAAE;oBAClC,OAAO,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAA;IAC/C,aAAA;IACJ,SAAA;IACD,QAAA,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;IACxB,QAAA,OAAO,OAAO,CAAA;SACjB;;IAGD,IAAA,IAAI,QAAQ,GAAA;YACR,IAAI,QAAQ,GAAQ,EAAE,CAAA;YACtB,KAAI,IAAI,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;IACvC,YAAA,IAAG,IAAI,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;oBAC/B,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAA;IAC1C,aAAA;IACJ,SAAA;IACD,QAAA,OAAO,QAAQ,CAAA;SAClB;IAED,IAAA,IAAI,UAAU,GAAA;YACV,IAAI,UAAU,GAAG,KAAK,CAAA;YACtB,KAAI,IAAI,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACvC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;oBAClD,UAAU,GAAG,IAAI,CAAA;IACpB,aAAA;IACJ,SAAA;IACD,QAAA,OAAO,UAAU,CAAA;SACpB;IAED,IAAA,MAAM,MAAM,GAAA,EAAK,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,EAAE;IACjE,IAAA,MAAM,MAAM,GAAA,EAAK,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,EAAE;IACjE,IAAA,MAAM,MAAM,GAAA,EAAK,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,EAAE;QACjE,MAAM,IAAI,GAAA,EAAO,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA,EAAE;QAEpE,iBAAiB,GAAA;IACrB,QAAA,IAAG,IAAI,CAAC,WAAW,KAAK,SAAS;IAAE,YAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAA;YACxD,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACxC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAA;IAClD,SAAA;SACJ;IAEO,IAAA,aAAa,CAAC,OAAO,EAAA;;YAEzB,KAAK,IAAI,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;IAC/C,YAAA,IAAI,OAAO,CAAC,aAAa,CAAC,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC,EAAG;oBACxF,IAAI,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;IAC/C,aAAA;IACJ,SAAA;;YAED,KAAI,IAAI,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;IACvC,YAAA,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;oBACnC,IAAI,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;IACzC,aAAA;IACJ,SAAA;SACJ;;IA5LD,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,gBAAA,EAAA;;;;eAAiC,GAAG;IAAA,CAAA,CAAA,CAAA;IA0H1B,UAAA,CAAA;QAATI,aAAQ;;;IAER,CAAA,EAAA,KAAA,CAAA,SAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA;IA4CO,UAAA,CAAA;QAAPP,WAAM;;;;IAKN,CAAA,EAAA,KAAA,CAAA,SAAA,EAAA,mBAAA,EAAA,IAAA,CAAA,CAAA;IAEO,UAAA,CAAA;QAAPA,WAAM;;;;IAaN,CAAA,EAAA,KAAA,CAAA,SAAA,EAAA,eAAA,EAAA,IAAA,CAAA,CAAA;IA1JO,UAAA,CAAA;QAAPA,WAAM;;yCAAoB,KAAK,CAAA,CAAA;;IAO/B,CAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,CAAA,CAAA;IAGO,UAAA,CAAA;QAAPA,WAAM;;yCAAmB,KAAK,CAAA,CAAA;;IAM9B,CAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;IA4BO,UAAA,CAAA;QAAPA,WAAM;;;wCAA8B,KAAK,CAAA;IAazC,CAAA,EAAA,KAAA,EAAA,aAAA,EAAA,IAAA,CAAA,CAAA;IAsGL;IACM,SAAU,KAAK,CAAC,WAAW,EAAA;QAC7B,IAAI,QAAQ,GAAG,WAAW,CAAA;QAE1B,QAAQ,CAAC,OAAO,GAAGD,eAAU,CAAC,IAAI,GAAG,EAAE,CAAC,CAAA;;IAGxC,IAAA,IAAI,CAAC,GAAS,UAAU,GAAG,IAAI,EAAA;IAC3B,QAAA,IAAI,CAAC,GAAS,cAAc,QAAQ,CAAA;gBAAG,WAAa,CAAA,GAAG,IAAI,EAAA,EAAI,KAAK,CAAC,GAAG,IAAI,CAAC,CAAA,EAAE;aAAE,CAAA;IAC7E,QAAA,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAA;IAE1B,QAAA,IAAI,GAAG,GAAK,IAAI,CAAC,EAAE,CAAA;IACnB,QAAA,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAA;YACrBD,mBAAc,CAAC,GAAG,CAAC,CAAA;IAEnB,QAAA,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS;IACzB,YAAA,OAAM,CAAyC,sCAAA,EAAA,KAAK,CAAC,IAAI,CAAA,CAAE,EAAC;;YAGhE,KAAK,IAAI,aAAa,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;IAC1C,YAAA,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,aAAa,CAAC,CAAA;IAC/D,SAAA;;IAED,QAAA,KAAK,IAAI,UAAU,IAAI,KAAK,CAAC,QAAQ,EAAE;IACnC,YAAA,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,CAAC,CAAA;IACxD,SAAA;;IAED,QAAA,KAAK,IAAI,UAAU,IAAI,KAAK,CAAC,WAAW,EAAE;IACtC,YAAA,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,CAAC,CAAA;IAC3D,SAAA;YAEDK,gBAAW,CAAC,MAAK;;IAEb,YAAA,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;IACT,gBAAA,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;;oBAErB,KAAK,IAAI,aAAa,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;IAC1C,oBAAA,IAAI,OAAO,CAAC,aAAa,CAAC,KAAK,SAAS,EAAE;4BACtC,GAAG,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;IAC9C,qBAAA;IACJ,iBAAA;;IAED,gBAAA,KAAK,IAAI,UAAU,IAAI,KAAK,CAAC,QAAQ,EAAE;IACnC,oBAAA,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;4BACnC,GAAG,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;IACxC,qBAAA;IACJ,iBAAA;IACJ,aAAA;IACL,SAAC,CAAC,CAAA;YACF,GAAG,CAAC,iBAAiB,EAAE,CAAA;IACvB,QAAA,OAAO,GAAG,CAAA;IACd,KAAC,CAAA;IAED,IAAA,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAA;QACtB,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAA;QAChC,OAAO,CAAC,CAAA;IACZ;;ICrQc,MAAiB,OAAO,CAAA;IAYlC,IAAA,WAAA,CAAY,KAAU,EAAA;IAFtB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;;IAAmB,SAAA,CAAA,CAAA;IAGf,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;SACrB;QAED,MAAM,MAAM,CAAC,GAAM,EAAA;YACf,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC9C,QAAA,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;IAC1B,QAAA,GAAG,CAAC,iBAAiB,EAAE,CAAA;IACvB,QAAA,OAAO,GAAG,CAAA;SACb;QAED,MAAM,MAAM,CAAC,GAAM,EAAA;YACf,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC9C,QAAA,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;YAC1B,GAAG,CAAC,iBAAiB,EAAE,CAAA;IACvB,QAAA,OAAO,GAAG,CAAA;SACb;QAED,MAAM,MAAM,CAAC,GAAM,EAAA;YACD,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAC;YAC9C,KAAI,IAAI,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE;IAC5C,YAAA,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,CAAA;IAC7B,QAAA,OAAO,GAAG,CAAA;SACb;;QAGD,MAAM,IAAI,CAAC,KAAK,EAAA;YACZ,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YACtC,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;SACzC;;QAGD,MAAM,IAAI,CAAC,KAAM,EAAE,QAAS,EAAE,KAAM,EAAE,MAAO,EAAA;IACzC,QAAA,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;YAChE,IAAI,IAAI,GAAQ,EAAE,CAAA;IAClB,QAAA,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;IAC1B,YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;IAC7C,SAAA;IACD,QAAA,OAAO,IAAI,CAAA;SACd;IACJ;;ICpDD;;IAEE;IAGK,IAAI,KAAK,GAAQ,EAAE,CAAA;IAG1B,SAAS,OAAO,CAAC,EAAU,EAAA;IACvB,IAAA,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;IAGoB,MAAA,YAA8B,SAAQ,OAAU,CAAA;QAejE,WAAY,CAAA,KAAU,EAAE,UAAmB,EAAA;YACvC,KAAK,CAAC,KAAK,CAAC,CAAA;IAdhB,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,YAAA,EAAA;;;;;IAA2B,SAAA,CAAA,CAAA;;IAG3B,QAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,OAAA,EAAA;;;;;IAAa,SAAA,CAAA,CAAA;IAYT,QAAA,IAAI,CAAC,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAA;IAChE,QAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAA;SAC9B;IAZD,IAAA,eAAe,CAAC,IAAiB,EAAA;YAC7B,IAAI,IAAI,GAAG,EAAE,CAAA;IACb,QAAA,KAAI,IAAI,GAAG,IAAI,IAAI,EAAE;IACjB,YAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAA;IACnC,SAAA;IACD,QAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAA;SAChC;QAQD,MAAM,QAAQ,CAAC,GAAc,EAAA;YACzB,IAAI,IAAI,CAAC,KAAK;IAAE,YAAA,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAEzC,QAAA,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE;;IAEnB,YAAA,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;IACb,YAAA,KAAI,IAAI,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE;oBAC/C,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAA;IACzB,aAAA;IACD,YAAA,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;gBACnC,KAAI,IAAI,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;IAC9C,gBAAA,GAAG,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA;IAC/B,aAAA;IACJ,SAAA;YACD,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC/B,QAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAA;IAClD,QAAA,OAAO,GAAG,CAAA;SACb;QAED,MAAM,QAAQ,CAAC,GAAc,EAAA;YACzB,IAAI,IAAI,CAAC,KAAK;IAAE,YAAA,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACzC,QAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAA;IACtC,QAAA,OAAO,GAAG,CAAA;SACb;QAED,MAAM,QAAQ,CAAC,GAAc,EAAA;YACzB,IAAI,IAAI,CAAC,KAAK;IAAE,YAAA,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACzC,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACvC,QAAA,OAAO,GAAG,CAAA;SACb;QAED,MAAM,MAAM,CAAC,KAAK,EAAA;YACd,IAAI,IAAI,CAAC,KAAK;IAAE,YAAA,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;;IAEzC,QAAA,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACtD,QAAA,OAAO,OAAO,CAAA;SACjB;QAED,MAAM,MAAM,CAAE,KAAM,EAAE,QAAS,EAAE,KAAM,EAAE,MAAO,EAAA;YAC5C,IAAI,IAAI,CAAC,KAAK;IAAE,YAAA,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACzC,IAAI,QAAQ,GAAG,EAAE,CAAA;;IAEjB,QAAA,IAAI,KAAK,EAAE;IACP,YAAA,KAAI,IAAI,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE;IAEzD,aAAA;IACJ,SAAA;IACI,aAAA;IACD,YAAA,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;IACnD,SAAA;;IAGD,QAAA,IAAI,QAAQ,EAAE;gBACV,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;IAEtC,gBAAA,KAAI,IAAI,aAAa,IAAI,QAAQ,EAAE;IAElC,iBAAA;IACD,gBAAA,OAAO,CAAC,CAAA;IACZ,aAAC,CAAC,CAAA;IACL,SAAA;;IAGD,QAAA,IAAI,KAAK,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,EAAE;gBAC7C,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAC,KAAK,CAAC,CAAA;IAClD,SAAA;IACD,QAAA,OAAO,QAAQ,CAAA;SAClB;QAED,MAAM,aAAa,CAAC,KAAM,EAAA;YACtB,IAAI,IAAI,GAAG,EAAE,CAAA;;YAEb,OAAO,IAAI,CAAC,MAAM,CAAA;SACrB;IACJ,CAAA;IAGD;aACgB,KAAK,GAAA;QACjB,OAAO,CAAC,GAAQ,KAAI;IAChB,QAAA,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,GAAG,CAAC,CAAA;IACnC,QAAA,GAAG,CAAC,SAAS,CAAC,SAAS,GAAG,OAAO,CAAA;IACrC,KAAC,CAAA;IACL,CAAC;IAED;IACA;IACA;IACA;IACA;;IC3HA;;;;;;;;;;IAUE;IAEF,SAAS,QAAQ,CAAE,GAAG,EAAG,UAAU,EAAA;;QAE/BO,qBAAgB,CAAC,GAAG,EAAE;YAClB,CAAC,UAAU,GAAG,IAAI;IACrB,KAAA,CAAC,CAAA;;QAGFC,cAAS,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,MAAM,KAAI;YAClC,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,GAAG,CAAC,UAAU,CAAC,KAAK,IAAI;IACpD,YAAA,MAAM,IAAI,KAAK,CAAC,CAA+B,4BAAA,EAAA,UAAU,KAAK,GAAG,CAAC,UAAU,CAAC,OAAO,MAAM,CAAC,QAAQ,CAAA,CAAE,CAAC,CAAA;IAC1G,QAAA,IAAI,GAAG,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,EAAE;gBACtD,IAAI;IACA,gBAAA,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvB,aAAA;IACD,YAAA,OAAO,GAAG,EAAE;IACR,gBAAA,IAAI,YAAY,GAAG,CAAmB,gBAAA,EAAA,GAAG,CAAC,IAAI,CAAmC,gCAAA,EAAA,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,CAAA;IACnG,gBAAA,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY;IACzB,oBAAA,MAAM,GAAG,CAAA;IAChB,aAAA;IACJ,SAAA;IACD,QAAA,OAAO,MAAM,CAAA;IACjB,KAAC,CAAC,CAAA;;QAGFL,YAAO,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,MAAM,KAAI;;IAEhC,QAAA,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI;IACjB,YAAA,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IAC7B,KAAC,CAAC,CAAA;IAEN,CAAC;IAGa,SAAU,EAAE,CAAC,GAAG,EAAE,UAAkB,EAAA;IAC9C,IAAA,IAAI,KAAK,GAAG,GAAG,CAAC,WAAW,CAAA;IAC3B,IAAA,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS;IAAE,QAAA,KAAK,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAA;IACtD,IAAA,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAA;IACxD,CAAC;IAED,MAAe,MAAM,CAAA;IACjB,IAAA,IAAI,OAAO,GAAA;IACP,QAAA,OAAO,EAAE,CAAA;SACZ;IACJ,CAAA;IAED,SAAS,QAAQ,GAAA;QACf,MAAe,KAAM,SAAQ,MAAM,CAAA;YAG1B,aAAa,KAAK,GAAA;IACvB,YAAA,OAAO,IAAK,CAAC;aACd;;YAEM,IAAI,GAAA;IACT,YAAA,OAAO,IAAK,CAAA;aACb;;;IAPD,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,MAAA,EAAA;;;;mBAA0B,EAAE;IAAC,KAAA,CAAA,CAAA;IAS/B,IAAA,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,IAAK,SAAQ,QAAQ,EAAQ,CAAA;IAClC,CAAA;IAC4B,IAAI,CAAC,KAAK;;ICxEvB,SAAA,WAAW,CAAC,GAAG,EAAE,UAAU,EAAA;;IAEvC,IAAAI,qBAAgB,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;IAC5D,CAAC;IAGa,SAAU,KAAK,CAAC,GAAG,EAAE,UAAkB,EAAA;IACjD,IAAA,IAAI,KAAK,GAAG,GAAG,CAAC,WAAW,CAAA;IAC3B,IAAA,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS;IAAE,QAAA,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAA;IAErD,IAAA,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,EAAE,WAAW,EAAE,CAAA;IAC3D;;ICZA,SAAS,aAAa,CAAC,GAAG,EAAE,UAAU,EAAA;QAClC,IAAI,SAAS,GAAG,KAAK,CAAA;IACrB,IAAA,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAA;IACzD,IAAA,IAAI,aAAa,GAAO,QAAQ,CAAC,aAAa,CAAA;IAC9C,IAAA,IAAI,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;;QAGlDA,qBAAgB,CAAC,GAAG,EAAE;YAClB,CAAC,UAAU,GAAG,IAAI;IACrB,KAAA,CAAC,CAAA;QAEFR,aAAQ;;IAEJ,IAAA,MAAK;YACD,IAAI,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAA;IACrD,QAAA,OAAO,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;SACvD;;IAED,IAAA,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,KAAI;IAC5B,QAAA,GAAG,CAAC,UAAU,CAAC,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAA;IACtD,KAAC,CACJ,CAAA;;;QAIDS,cAAS,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,MAAM,KAAI;IAClC,QAAA,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,aAAa,CAAC,EAAE;gBACvE,MAAM,IAAI,KAAK,CAAC,CAAA,8BAAA,EAAiC,aAAa,CAAC,IAAI,CAAW,SAAA,CAAA,CAAC,CAAA;IAClF,SAAA;IACD,QAAA,OAAO,MAAM,CAAA;IACjB,KAAC,CAAC,CAAA;;QAEFL,YAAO,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,MAAU,KAAI;IACpC,QAAA,IAAI,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAA;IACrC,QAAA,IAAI,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAA;IAErC,QAAA,IAAI,eAAe,KAAK,eAAe,IAAI,SAAS;IAChD,YAAA,OAAM;YAEV,SAAS,GAAG,IAAI,CAAA;YAChB,IAAI;IACA,YAAA,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,EAAE;;IAE1B,gBAAA,KAAK,IAAI,OAAO,IAAI,iBAAiB,EAAE;IACnC,oBAAA,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAA;IACtB,iBAAA;IACJ,aAAA;IACI,iBAAA;;IAED,gBAAA,IAAI,OAAO,GAAQ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;IACjE,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;IAE/C,oBAAA,IAAI,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACxD,wBAAA,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;IAC/D,iBAAA;IACJ,aAAA;gBACD,SAAS,GAAG,KAAK,CAAA;IACpB,SAAA;IACD,QAAA,OAAM,CAAC,EAAE;;IAEL,YAAA,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,EAAE;IAC1B,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC/C,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;IACnC,iBAAA;IACJ,aAAA;IACI,iBAAA;oBACD,IAAI,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAA;IACzC,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC/C,oBAAA,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1D,iBAAA;IACJ,aAAA;gBACD,SAAS,GAAG,KAAK,CAAA;IACjB,YAAA,MAAM,CAAC,CAAA;IACV,SAAA;;YAGD,IAAI,QAAQ,CAAC,GAAG,EAAE;IACd,YAAA,IAAI,eAAe,EAAE;IACjB,gBAAA,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAA;IACvC,aAAA;IACD,YAAA,IAAI,eAAe,EAAE;IACjB,gBAAA,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;IACtC,aAAA;IACJ,SAAA;IACL,KAAC,CAAC,CAAA;IACN,CAAC;IAEuB,SAAA,OAAO,CAAC,aAAkB,EAAE,GAAG,iBAA2B,EAAA;IAC9E,IAAA,aAAa,GAAG,aAAa,CAAC,SAAS,CAAA;QACvC,OAAO,UAAU,GAAQ,EAAE,UAAkB,EAAA;IACzC,QAAA,IAAI,KAAK,GAAG,GAAG,CAAC,WAAW,CAAA;IAC3B,QAAA,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS;IAAE,YAAA,KAAK,CAAC,WAAW,GAAG,EAAE,CAAA;;IAE3D,QAAA,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG;IAC5B,YAAA,SAAS,EAAE,aAAa;IACxB,YAAA,QAAQ,EAAE;IACN,gBAAA,aAAa,EAAE,aAAa;;IAE5B,gBAAA,iBAAiB,EAAE,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,GAAG,CAAC,CAAG,EAAA,UAAU,KAAK,CAAC;IACzF,aAAA;aACJ,CAAA;IACL,KAAC,CAAA;IACL;;ICrGA,SAAS,SAAS,CAAC,GAAU,EAAE,UAAU,EAAA;QAErC,IAAI,SAAS,GAAG,KAAK,CAAA;IACrB,IAAA,IAAI,YAAY,GAAc,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAA;IACrF,IAAA,IAAI,uBAAuB,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,wBAAwB,CAAA;;QAGjGI,qBAAgB,CAAC,GAAG,EAAE;YAClB,CAAC,UAAU,GAAG,IAAI;IACrB,KAAA,CAAC,CAAA;;QAGFC,cAAS,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,MAAM,KAAI;IAClC,QAAA,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,KAAK,YAAY,CAAC;gBACjE,MAAM,IAAI,KAAK,CAAC,CAAA,8BAAA,EAAiC,YAAY,CAAC,IAAI,CAAW,SAAA,CAAA,CAAC,CAAA;IACtF,QAAA,OAAO,MAAM,CAAA;IACjB,KAAC,CAAC,CAAA;;QAGFL,YAAO,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,MAAU,KAAI;IACpC,QAAA,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAA;IACpC,QAAA,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAA;IAEpC,QAAA,IAAI,cAAc,KAAK,cAAc,IAAI,SAAS;IAC9C,YAAA,OAAM;YAEV,SAAS,GAAG,IAAI,CAAA;YAChB,IAAI;;IAEA,YAAA,IAAI,cAAc,EAAE;IAChB,gBAAA,KAAK,IAAI,OAAO,IAAI,uBAAuB,EAAE;IACzC,oBAAA,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,CAAA;IACjC,iBAAA;IACJ,aAAA;;IAED,YAAA,IAAI,cAAc,EAAE;IAChB,gBAAA,IAAI,OAAO,GAAQ,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;IACrD,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,uBAAuB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;IAErD,oBAAA,IAAI,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7D,wBAAA,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;IACnE,iBAAA;IACJ,aAAA;gBACD,SAAS,GAAG,KAAK,CAAA;IACpB,SAAA;IACD,QAAA,OAAM,CAAC,EAAE;;;;;;;;;;;;;;;;IAgBR,SAAA;IACL,KAAC,CAAC,CAAA;IACN,CAAC;IAGuB,SAAA,GAAG,CAAC,YAAiB,EAAE,GAAG,wBAAkC,EAAA;IAChF,IAAA,YAAY,GAAG,YAAY,CAAC,SAAS,CAAA;QACrC,OAAO,UAAU,GAAQ,EAAE,UAAkB,EAAA;IACzC,QAAA,IAAI,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,WAAW,CAAA;IACrC,QAAA,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS;IAAE,YAAA,KAAK,CAAC,WAAW,GAAG,EAAE,CAAA;;YAE3D,wBAAwB,GAAG,wBAAwB,CAAC,MAAM,GAAG,wBAAwB,GAAE,CAAC,CAAA,EAAG,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAK,GAAA,CAAA,CAAC,CAAA;IACzH,QAAA,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG;IAC5B,YAAA,SAAS,EAAE,SAAS;IACpB,YAAA,QAAQ,EAAE;IACN,gBAAA,YAAY,EAAE,YAAY;IAC1B,gBAAA,wBAAwB,EAAE,wBAAwB;IACrD,aAAA;aACJ,CAAA;;YAGDA,YAAO,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,aAAkB,KAAI;IACjD,YAAA,IAAI,UAAU,CAAA;gBACd,QAAQ,aAAa,CAAC,IAAI;IACtB,gBAAA,KAAK,KAAK;IACN,oBAAA,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAA;IACnC,oBAAA,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA,IAAA,EAAO,UAAU,CAAA,CAAE,EAAEF,YAAO,CAAC,MAAK;IACzD,wBAAA,IAAI,GAAG,GAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,CAAC,CAAC,CAAA;IAC9E,wBAAA,IAAI,GAAG,EAAE;;;;;;IAML,4BAAAD,gBAAW,CAAC,MAAK,EAAG,GAAG,CAAC,UAAU,CAAC,GAAG,UAAU,CAAA,EAAE,CAAC,CAAA;IACtD,yBAAA;yBACJ,CAAC,CAAC,CAAA;wBACH,MAAK;IACT,gBAAA,KAAK,QAAQ;IACT,oBAAA,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAA;wBACnC,IAAI,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAO,IAAA,EAAA,UAAU,CAAE,CAAA,CAAC,EAAE;4BACjD,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,UAAU,CAAA,CAAE,CAAC,EAAE,CAAA;4BACjD,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAO,IAAA,EAAA,UAAU,CAAE,CAAA,CAAC,CAAA;IACrD,qBAAA;IACD,oBAAA,IAAI,GAAG,GAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,CAAC,CAAC,CAAA;IAC9E,oBAAA,IAAI,GAAG;IACH,wBAAAA,gBAAW,CAAC,MAAK,EAAG,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI,CAAA,EAAE,CAAC,CAAA;wBACjD,MAAK;IACZ,aAAA;IACL,SAAC,CAAC,CAAA;IACN,KAAC,CAAA;IACL;;IChHA,SAAS,UAAU,CAAC,GAAU,EAAE,UAAU,EAAA;QAEtC,IAAI,SAAS,GAAG,KAAK,CAAA;IACrB,IAA8B,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,aAAY;IACrF,IAAA,IAAI,uBAAuB,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,wBAAwB,CAAA;;QAGjGO,qBAAgB,CAAC,GAAG,EAAE;YAClB,CAAC,UAAU,GAAG,EAAE;IACnB,KAAA,CAAC,CAAA;;QAGFC,cAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,MAAW,KAAI;;;;;;;;;;;;IAavC,QAAA,OAAO,MAAM,CAAA;IACjB,KAAC,CAAC,CAAA;;QAGFL,YAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,MAAU,KAAI;IACpC,QAAA,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ;gBACxB,OAAM;IAEV,QAAA,IAAI,eAAe,GAAG,MAAM,CAAC,OAAO,CAAA;IACpC,QAAA,IAAI,eAAe,GAAG,MAAM,CAAC,KAAK,CAAA;YAElC,SAAS,GAAG,IAAI,CAAA;YAChB,IAAI;;gBAEA,KAAI,IAAI,cAAc,IAAI,eAAe;oBACrC,KAAK,IAAI,OAAO,IAAI,uBAAuB;IACvC,oBAAA,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,CAAA;;IAEtC,YAAA,IAAI,OAAO,GAAQ,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;IACrD,YAAA,KAAI,IAAI,cAAc,IAAI,eAAe,EAAE;IACvC,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,uBAAuB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;IAErD,oBAAA,IAAI,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7D,wBAAA,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,GAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;IACpE,iBAAA;IACJ,aAAA;gBACD,SAAS,GAAG,KAAK,CAAA;IACpB,SAAA;IACD,QAAA,OAAM,CAAC,EAAE;;;;;;;;;;;;;;;;IAgBR,SAAA;IACL,KAAC,CAAC,CAAA;IACN,CAAC;IAEuB,SAAA,IAAI,CAAC,YAAiB,EAAE,GAAG,wBAAkC,EAAA;QACjF,OAAO,UAAU,GAAQ,EAAE,UAAkB,EAAA;IACzC,QAAA,IAAI,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,WAAW,CAAA;IACrC,QAAA,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS;IAAE,YAAA,KAAK,CAAC,WAAW,GAAG,EAAE,CAAA;;YAE3D,wBAAwB,GAAG,wBAAwB,CAAC,MAAM,GAAG,wBAAwB,GAAE,CAAC,CAAA,EAAG,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAK,GAAA,CAAA,CAAC,CAAA;IACzH,QAAA,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG;IAC5B,YAAA,SAAS,EAAE,UAAU;IACrB,YAAA,QAAQ,EAAE;IACN,gBAAA,YAAY,EAAE,YAAY;IAC1B,gBAAA,wBAAwB,EAAE,wBAAwB;IACrD,aAAA;aACJ,CAAA;;YAGDA,YAAO,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,aAAkB,KAAI;IACjD,YAAA,IAAI,UAAU,CAAA;gBACd,QAAQ,aAAa,CAAC,IAAI;IACtB,gBAAA,KAAK,KAAK;IACN,oBAAA,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAA;IACnC,oBAAA,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA,KAAA,EAAQ,UAAU,CAAA,CAAE,EAAEF,YAAO,CAAC,MAAK;IAC1D,wBAAA,IAAI,GAAG,GAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,CAAC,CAAC,CAAA;IAC9E,wBAAA,IAAI,GAAG,EAAE;gCACL,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;gCAC7C,IAAI,CAAC,IAAI,CAAC,CAAC;IACP,gCAAAD,gBAAW,CAAC,MAAQ,EAAA,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA,EAAE,CAAC,CAAA;IAC9D,yBAAA;yBACJ,CAAC,CAAC,CAAA;wBACH,MAAK;IACT,gBAAA,KAAK,QAAQ;IACT,oBAAA,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAA;wBACnC,IAAI,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAQ,KAAA,EAAA,UAAU,CAAE,CAAA,CAAC,EAAE;4BAClD,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,UAAU,CAAA,CAAE,CAAC,EAAE,CAAA;4BAClD,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAQ,KAAA,EAAA,UAAU,CAAE,CAAA,CAAC,CAAA;IACtD,qBAAA;IACD,oBAAA,IAAI,GAAG,GAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,CAAC,CAAC,CAAA;IAC9E,oBAAA,IAAI,GAAG,EAAE;4BACL,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;4BAC7C,IAAI,CAAC,GAAG,CAAC,CAAC;IACN,4BAAAA,gBAAW,CAAC,QAAQ,GAAG,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IAC3D,qBAAA;wBACD,MAAK;IACZ,aAAA;IACL,SAAC,CAAC,CAAA;IACN,KAAC,CAAA;IACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
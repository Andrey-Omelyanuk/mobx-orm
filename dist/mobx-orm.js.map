{"version":3,"file":"mobx-orm.js","sources":["../src/query.ts","../src/model.ts","../src/adapters/local.ts","../src/adapters/rest.ts","../src/fields/id.ts","../src/fields/field.ts","../src/fields/foreign.ts","../src/fields/one.ts","../src/fields/many.ts"],"sourcesContent":["import { autorun, makeAutoObservable, makeObservable, observable, observe, reaction, runInAction, when } from \"mobx\"\nimport { shouldCompute } from \"mobx/dist/internal\"\nimport { Model } from \"./model\"\n\n\nexport default class Query<M extends Model> {\n\n    @observable items       : M[] = []       // TODO: do not allow to change items outside\n    @observable filters     : object = {}\n    @observable order_by    : string[] = []\n    @observable page        : number = 0\n    @observable page_size   : number = 50\n    @observable is_ready    : boolean = false\n    @observable error       : string = '' \n\n    private disposers = []\n    private disposer_objects = {}\n\n    constructor(model, filters?, order_by?, page?, page_size?) {\n        if (filters  ) this.filters = filters\n        if (order_by ) this.order_by = order_by\n        if (page     ) this.page = page\n        if (page_size) this.page_size = page_size\n        makeObservable(this)\n        this.disposers.push(autorun(async () => {\n            runInAction(() => this.is_ready = false)\n            try {\n                let data = await model.adapter.load(\n                    this.filters, \n                    this.order_by, \n                    this.page_size, \n                    this.page*this.page_size\n                    )\n                runInAction(() => this.items = data)\n            }\n            catch (e) {\n                runInAction(() => this.error = e)\n            }\n            runInAction(() => this.is_ready = true)\n        }))\n\n        debugger\n        this.disposers.push(observe(model.cache, (change: any) => {\n            if (change.type == 'add') {\n                let __id = change.name\n                let obj  = change.newValue\n\n                debugger\n                if (should_be_in_the_list(obj, this.filters))\n                    this.items.push(obj)\n\n                this.disposer_objects[__id] = reaction(\n                    () => {\n                        return should_be_in_the_list(obj, this.filters)\n                    }, \n                    (shold_be_in_the_list) => {\n                        let i = this.items.indexOf(obj)\n                        if (shold_be_in_the_list && i == -1)\n                            this.items.push(obj)\n                        if (!shold_be_in_the_list && i != -1)\n                            this.items.splice(i, 1)\n                    } \n                )\n            }\n\n            if (change.type == \"delete\") {\n                let __id = change.name\n                let obj  = change.oldValue\n                this.disposer_objects[__id]()\n                delete this.disposer_objects[__id]\n                let i = this.items.indexOf(obj)\n                if (i != -1)\n                    this.items.splice(i, 1)\n            }\n\n        }))\n    }\n\n    destroy() {\n        for(let disposer of this.disposers) disposer()\n    }\n}\n\nfunction should_be_in_the_list(obj, filters) {\n    if (Object.keys(filters).length) {\n        debugger\n        for(let key in filters) {\n            if (obj[key] != filters[key])\n                return false\n        }\n        return true\n    }\n    else\n        return true\n}","import { action, computed, makeObservable, observable, runInAction } from 'mobx'\nimport Adapter from './adapters/adapter'\nimport Query from './query'\n\n\nexport abstract class Model {\n\n    // this private static properties will be copied to real model in the model decorator\n    private static ids          : any[]\n    private static adapter      : Adapter<Model>\n    private static cache        : Map<string, Model>\n    private static fields       : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }\n    }\n\n\n    static load(filter = {}, order_by = {}, page = 0, page_size = 50) {\n        return new Query(this, filter, order_by, page, page_size)\n    }\n\n    static clearCache() {\n        // we need it for run triggers on id fields \n        for (let obj of this.cache.values()) {\n            for (let id_field_name of this.ids) {\n                obj[id_field_name] = null\n            }\n        }\n    }\n\n    // TODO push it to utils\n    static __id(obj, ids: []) : string | null {\n        let id = '' \n        for (let id_name of ids) {\n            // if any id field is null then we should return null because id is not complite\n            if (obj[id_name] === null || obj[id_name] === undefined) \n                return null\n            id += `${obj[id_name]} :`\n        }\n        return id\n    }\n\n    private readonly _init_data\n    private disposers = new Map()\n\n    constructor (...args) { }\n\n    // build id string from ids fields and return it\n    @computed get __id() : string | null {\n        return Model.__id(this, this.model.ids)\n    }\n\n    // TODO: any is band-aid \n    get model() : any {\n        return (<any>this.constructor).__proto__\n    }\n\n    // create or update object in the repo \n    async save() {\n        return this.model.adapter.save(this)\n    }\n\n    // delete object from the repo \n    async delete() {\n        await this.model.adapter.delete(this)\n        // reset ids\n        for(let id_name of this.model.ids)\n            this[id_name] = null\n    }\n\n    // add obj to the cache\n    @action inject() {\n        if (this.__id === null)                    \n            throw new Error(`Object should have id!`)\n        if (this.model.cache.has(this.__id)) {\n            debugger\n            throw new Error(`Object with id \"${this.__id}\" already exist in the cache of model: \"${this.model.name}\")`)\n        }\n        this.model.cache.set(this.__id, this)\n    }\n\n    // remove obj from the cache\n    @action eject() {\n        if (this.__id === null)\n            return                   \n        if (!this.model.cache.has(this.__id)) \n            throw new Error(`Object with id \"${this.__id}\" not exist in the cache of model: ${this.model.name}\")`)\n        this.model.cache.delete(this.__id)\n    }\n}\n\n\n// Decorator\nexport function model(constructor) {\n    var original = constructor\n\n    original.cache = observable(new Map())\n    // makeObservable(original, { cache: observable })\n\n    // the new constructor\n    let f : any = function (...args) {\n        // let c : any = function () { return original.apply(this, args) }\n        let c : any = class extends original { constructor (...args) { super(...args) } }\n\n        c.__proto__ = original\n        // c.prototype = original.prototype\n        let obj = new c()\n        makeObservable(obj)\n        // we have to save init data for detect changes\n        obj._init_data = args[0] ? args[0] : {}\n\n        // save default values from class declaration to init_data\n        for (let field_name in obj.model.fields) {\n            if (obj._init_data[field_name] === undefined && obj[field_name] !== undefined) {\n                obj._init_data[field_name] = obj[field_name]\n            }\n        }\n\n        // apply fields decorators\n        for (let field_name in obj.model.fields) {\n            obj.model.fields[field_name].decorator(obj, field_name)\n        }\n\n        runInAction(() => {\n            // push init_data to object \n            // ids should be the last\n            let ids = []\n            for (let field_name in obj._init_data) {\n                if (obj.model.ids && obj.model.ids.includes(field_name))\n                    ids.push(field_name)\n                else\n                    obj[field_name] = obj._init_data[field_name]\n            }\n            for (let field_name of ids) {\n                obj[field_name] = obj._init_data[field_name]\n            }\n        })\n\n        return obj\n    }\n\n    f.__proto__ = original\n    f.prototype = original.prototype   // copy prototype so intanceof operator still works\n    return f                      // return new constructor (will override original)\n}\n","import { Model } from '../model'\nimport Adapter  from './adapter'\n\n/*\n*/\n\nlet store = {}\n\nexport class LocalAdapter<M extends Model> implements Adapter<M> {\n    constructor(\n        private cls,\n        private store_name: string) {\n        store[store_name] = {}\n    }\n\n    async save(obj: M) : Promise<M> {\n        // create \n        if (obj.__id === null) {\n            // calculate and set new ID\n            let ids = [0]\n            for(let id of Object.keys(store[this.store_name])) {\n                ids.push(parseInt(id))\n            }\n            let max = Math.max.apply(null, ids)\n            for(let name_id of obj.model.ids) {\n                obj[name_id] = max + 1\n            }\n            store[this.store_name][obj.__id] = obj\n        }\n        // edit\n        else {\n            store[this.store_name][obj.__id] = obj\n        }\n        return obj\n    }\n    async delete(obj: M) : Promise<any> {\n        delete store[this.store_name][obj.__id]\n    }\n\n    load (where={}, order_by=[], limit=50, offset = 0) : Promise<M[]> {\n        throw('Not implemented')\n    }\n}\n\n// model decorator\nexport function local(api: string) {\n    return (cls) => {\n        let adapter = new LocalAdapter(cls, api)\n        cls.__proto__.adapter = adapter \n    }\n}\n","import { Model } from '../model'\nimport Adapter  from './adapter'\n\n/*\n*/\n\nexport class RestAdapter<M extends Model> implements Adapter<M> {\n    constructor(\n        private cls,\n        private http,\n        private api: string) {\n    }\n\n    async save(obj: M) : Promise<M> {\n        // gather data from obj\n        let data = {}\n        for(let field_name in obj.model.fields) {\n            if (obj[field_name] !== null) {\n                data[field_name] = obj[field_name]\n            }\n        }\n\n        if (obj.__id === null) {\n            // create \n            data = await this.http.post(`${this.api}/`, data)\n            // update values\n            for(let field_name in obj.model.fields) {\n                obj[field_name] = data[field_name]\n            }\n        }\n        else {\n            // edit\n            data = await this.http.put(`${this.api}/${obj.__id}/`, data)\n            // update values\n            for(let field_name in obj.model.fields) {\n                // do not touch the ids\n                if (!obj.model.ids.includes(field_name)) {\n                    obj[field_name] = data[field_name]\n                }\n            }\n        }\n        // push saved data to obj\n        return obj\n    }\n    async delete(obj: M) : Promise<any> {\n        return this.http.delete(`${this.api}/${obj.__id}/`)\n    }\n\n    async load (where={}, order_by=[], limit=50, offset = 0) : Promise<M[]> {\n        // TODO build query string \n        let query = ''\n\n        let data = await this.http.get(`${this.api}/?${query}`)\n\n        // init objects from data \n        let objs : M[] = []\n        for (let obj of data) {\n            objs.push(new this.cls(obj))\n        }\n        return objs\n    }\n}\n\n// model decorator\nexport function rest(http, api: string) {\n    return (cls) => {\n        let adapter = new RestAdapter(cls, http, api)\n        cls.__proto__.adapter = adapter \n    }\n}\n","import { observable, observe, intercept, extendObservable } from 'mobx'\n\n/*\n1. you can setup id only once!\nusing obj.id = x, new Obj({id: x}) or obj.save()\n\n2. save() has two behavior depend on id \n - id === undefined or null -> create object on remote storage and get it\n - id === some number       -> save object in remote storage \n\n3. if you want just load data to cache then you can use this \nnew Obj({id: x, ...})\n*/\n\nfunction field_ID (obj , field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // before changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && obj[field_name] !== null)\n            throw new Error(`You cannot change id field: ${field_name}. ${obj[field_name]} to ${change.newValue}`)\n        if (obj[field_name] !== null && change.newValue === null) {\n            try {\n                obj.eject()\n            }\n            catch (err) {\n                let ignore_error = `Object with id \"${obj.__id}\" not exist in the model cache: ${obj.model.name}\")`\n                if (err.name !== ignore_error)\n                    throw err\n            }\n        }\n        return change\n    })\n\n    // after changes\n    observe(obj, field_name, (change) => {\n        // if id is complete\n        if (obj.__id !== null) \n            obj.inject()\n    })\n\n}\n\n\nexport default function id(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.fields === undefined) model.fields = {}\n    if (model.ids    === undefined) model.ids = []\n\n    model.fields[field_name] = { decorator: field_ID }  // register field \n    model.ids.push(field_name)                          // register id\n\n}\n","import { extendObservable } from 'mobx'\n\n\n\nexport function field_field(obj, field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n}\n\n\nexport default function field(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.fields === undefined) model.fields = {}\n\n    model.fields[field_name] = { decorator: field_field }  // register field \n}\n","// import 'reflect-metadata'\nimport {intercept, observe, extendObservable, observable, autorun, when, reaction} from 'mobx'\n\nfunction field_foreign(obj, field_name) {\n    let edit_mode = false\n    let settings = obj.model.fields[field_name].settings\n    let foreign_model     = settings.foreign_model\n    let foreign_ids_names = settings.foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    reaction(\n        // watch on foreign cache for foreign object\n        () => {\n            let id = foreign_model.__id(obj, foreign_ids_names)\n            return id ? foreign_model.cache.get(id) : null\n        },\n        // update foreign field\n        (foreign_obj, prev, reaction) => {\n            obj[field_name] = foreign_obj ? foreign_obj : null \n        })\n\n    // Setter\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model == foreign_model)) {\n            throw new Error(`You can set only instance of \"${foreign_model.name}\" or null`)\n        }\n        return change\n    })\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let new_foreign_obj = change.newValue\n        let old_foreign_obj = change.oldValue\n\n        if (new_foreign_obj === old_foreign_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> A.b_id -> A.b -> A.b_id ...\n\n        edit_mode = true\n        try {\n            if (change.newValue === null) {\n                // if foreign set to null then reset ids on the obj\n                for (let id_name of foreign_ids_names) {\n                    obj[id_name] = null \n                }\n            }\n            else {\n                // if foreign set to obj then update ids from the obj's ids\n                let obj_ids = change.newValue.model.ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    // do not touch if it the same\n                    if (obj[foreign_ids_names[i]] != change.newValue[obj_ids[i]])\n                        obj[foreign_ids_names[i]]  = change.newValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // rollback changes!\n            if (change.oldValue === null) {\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = null \n                }\n            }\n            else {\n                let obj_ids = change.oldValue.model.ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n            throw e\n        }\n\n        // if foreign have the one then update the one\n        if (settings.one) {\n            if (old_foreign_obj) {\n                old_foreign_obj[settings.one] = null\n            }\n            if (new_foreign_obj) {\n                new_foreign_obj[settings.one] = obj \n            }\n        }\n\n    })\n}\n\n\nexport default function foreign(foreign_model: any, ...foreign_ids_names: string[]) {\n    foreign_model = foreign_model.__proto__ // band-aid\n    return function (cls: any, field_name: string) {\n        debugger\n        let model = cls.constructor\n        if (model.fields === undefined) model.fields = {}\n        // register field \n        model.fields[field_name] = { \n            decorator: field_foreign,\n            settings: {\n                foreign_model: foreign_model,\n                // if it is empty then try auto detect it (it works only with single id) \n                foreign_ids_names: foreign_ids_names.length ? foreign_ids_names : [`${field_name}_id`]\n            } \n        } \n\n        // TODO finish it\n        // watch on the foreign cache \n        // if foreign obj was created then it should be attached to foreign\n        // if foreign obj was deleted then it should be removed from foreign\n        // e.i. update foreign obj when foreign ids was changed\n        // reaction(() => foreign_model.cache, (value, prev_value, reaction) => {\n        //     debugger\n        // })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_one(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.fields[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.fields[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // 1. checks before set new changes\n    intercept(obj, <any>field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model === remote_model))\n                throw new Error(`You can set only instance of \"${remote_model.name}\" or null`)\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let old_remote_obj = change.oldValue\n        let new_remote_obj = change.newValue\n\n        if (new_remote_obj === old_remote_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> B.a_id -> A.b -> B.a_id ...\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote obj\n            if (old_remote_obj) {\n                for (let id_name of remote_foreign_ids_name) {\n                    old_remote_obj[id_name] = null \n                }\n            }\n            // set foreign ids on the remote obj \n            if (new_remote_obj) {\n                let obj_ids = obj.model.ids \n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]] = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\n\nexport default function one(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    remote_model = remote_model.__proto__ // band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.fields === undefined) model.fields = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.fields[field_name] = { \n            decorator: field_one,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.disposers.set(`one ${field_name}` ,autorun(() => {\n                        let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            // TODO: is it not bad?\n                            // if (obj[field_name])\n                            //     // TODO better name of error\n                            //     // TODO add test for this case\n                            //     throw ('One: bad')\n                            runInAction(() => { obj[field_name] = remote_obj })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.disposers.get(`one ${field_name}`)) {\n                        remote_obj.disposers.get(`one ${field_name}`)()\n                        remote_obj.disposers.delete(`one ${field_name}`)\n                    }\n                    let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) \n                        runInAction(() => { obj[field_name] = null })\n                    break\n            }\n        })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_many(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.fields[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.fields[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: []\n    })\n\n    // 1. checks before set new changes\n    intercept(obj[field_name], (change: any) => {\n        // TODO\n        // if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor === remote_model.__proto__))\n        //         throw new Error(`You can set only instance of \"${remote_model.__proto__.name}\" or null`)\n\n        // TODO: if we push exist obj then ignore it? and not duplicate\n        // TODO: create a test for this case \n        // remote obj can be in the many \n        // for (let new_remote_obj of change.added) {\n        //     const i = obj[field_name].indexOf(new_remote_obj)\n        //     if (i == -1)\n        //         throw new Error(`\"${new_remote_obj.model.name}\" id:\"${new_remote_obj.__id}\" alredy in many \"${obj.model.name}\" id:\"${field_name}\"`)\n        // }\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj[field_name], (change:any) => {\n        if (change.type !== 'splice')\n            return \n\n        let old_remote_objs = change.removed\n        let new_remote_objs = change.added\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote objs\n            for(let old_remote_obj of old_remote_objs)\n                for (let id_name of remote_foreign_ids_name)\n                    old_remote_obj[id_name] = null \n            // set foreign ids on the remote objs \n            let obj_ids = obj.model.ids \n            for(let new_remote_obj of new_remote_objs) {\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]]  = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\nexport default function many(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.fields === undefined) model.fields = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.fields[field_name] = { \n            decorator: field_many,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.disposers.set(`many ${field_name}` ,autorun(() => {\n                        let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            const i = obj[field_name].indexOf(remote_obj)\n                            if (i == -1)\n                                runInAction(() => { obj[field_name].push(remote_obj) })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.disposers.get(`many ${field_name}`)) {\n                        remote_obj.disposers.get(`many ${field_name}`)()\n                        remote_obj.disposers.delete(`many ${field_name}`)\n                    }\n                    let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) {\n                        const i = obj[field_name].indexOf(remote_obj)\n                        if (i > -1)\n                            runInAction(() => { obj[field_name].splice(i, 1); })\n                    } \n                    break\n            }\n        })\n    }\n}"],"names":["Query","[object Object]","model","filters","order_by","page","page_size","Object","this","makeObservable","disposers","push","autorun","async","runInAction","is_ready","data","adapter","load","items","e","error","observe","cache","change","type","__id","name","obj","newValue","should_be_in_the_list","disposer_objects","reaction","shold_be_in_the_list","i","indexOf","splice","oldValue","disposer","keys","length","key","__decorate","observable","Model","args","Map","filter","values","id_field_name","ids","id","id_name","undefined","constructor","__proto__","save","delete","Error","has","set","computed","action","store","LocalAdapter","cls","store_name","parseInt","max","Math","apply","name_id","where","limit","offset","RestAdapter","http","api","field_name","fields","post","put","includes","get","objs","field_ID","extendObservable","intercept","eject","err","ignore_error","inject","field_field","field_foreign","edit_mode","settings","foreign_model","foreign_ids_names","foreign_obj","prev","new_foreign_obj","old_foreign_obj","obj_ids","one","field_one","remote_model","remote_foreign_ids_name","remote_foreign_ids_names","old_remote_obj","new_remote_obj","field_many","old_remote_objs","removed","new_remote_objs","added","decorator","prototype","toLowerCase","remote_change","remote_obj","original","f","c","super","_init_data"],"mappings":"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"}

// FILE GENERATED BY `rollup-plugin-dts@0.15.1`
// https://github.com/Swatinem/rollup-plugin-dts

declare class Model {
    static get(id: string): Model;
    static all(): Model[];
    static load(where?: {}, order_by?: {}, limit?: number, offset?: number): Promise<any>;
    static getModelName(): string;
    static getModelDescription(): ModelDescription;
    private readonly _init_data;
    constructor(init_data?: any);
    readonly __id: string | null;
    getModelName(): string;
    getModelDescription(): ModelDescription;
    save(): Promise<any>;
    delete(): Promise<any>;
}
declare function model(cls: any): any;

interface Adapter {
    save: undefined | ((obj: Model) => any);
    delete: undefined | ((obj: Model) => any);
    load: undefined | ((model_name: any, where: any, order_by: any, limit: any, offset: any) => any);
}
declare class DefaultAdapter implements Adapter {
    newId: number;
    save(obj: any): Promise<any>;
    delete(obj: Model): Promise<Model>;
    load(): Promise<void>;
}

interface FieldTypeDecorator {
    (model_name: string, field_name: string, obj: Object): void;
}
interface ModelDescription {
    ids: any[];
    fields: {
        [field_name: string]: {
            type: undefined | string;
            settings: undefined | any;
            serialize: undefined | any;
            deserialize: undefined | any;
        };
    };
    objects: {
        [string_id: string]: Model;
    };
    adapter: Adapter;
}
declare class Store {
    debug: boolean;
    models: {
        [model_name: string]: ModelDescription;
    };
    field_types: {
        [type_name: string]: FieldTypeDecorator;
    };
    registerModel(model_name: any): void;
    registerFieldType(type: any, decorator: any): void;
    registerModelField(model_name: any, type: any, field_name: any, settings?: {}, serialize?: any, deserialize?: any): void;
    registerId(model_name: any, field_name: any): void;
    inject(obj: Model): void;
    eject(obj: Model): void;
    clear(): void;
    clearModel(model_name: any): void;
    getId(obj: Model, id_name_fields: string[]): string | null;
}
declare let store: Store;

declare function id(cls: Model, field_name: string): void;

declare function field(cls: any, field_name: string): void;

declare function foreign(foreign_model_name: any, ...foreign_id_field_names: string[]): (cls: any, field_name: string) => void;

declare function one(remote_model_name: any, foreign_field_on_remote_model: string): (cls: any, field_name: string) => void;

declare function many(remote_model_name: any, foreign_field_on_remote_model: string): (cls: any, field_name: string) => void;

declare function number(cls: any, field_name: string): void;

declare function number$1(cls: any, field_name: string): void;

declare function datetime(cls: any, field_name: string): void;

declare function number$2(cls: any, field_name: string): void;

export { Adapter, DefaultAdapter, Model, number$2 as boolean, datetime, field, number$1 as float, foreign, id, many, model, number, one, store };

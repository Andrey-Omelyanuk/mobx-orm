{"version":3,"file":"mobx-orm.es2015.js","sources":["../src/query.ts","../src/model.ts","../src/adapters/local.ts","../src/adapters/rest.ts","../src/fields/id.ts","../src/fields/field.ts","../src/fields/foreign.ts","../src/fields/one.ts","../src/fields/many.ts"],"sourcesContent":["import { action, autorun, makeObservable, observable, observe, reaction, runInAction } from \"mobx\"\nimport { Model } from \"./model\"\n\n// TODO: do not allow to change obj.items outside\n\nexport default class Query<M extends Model> {\n\n    private     model       : any            // TODO: what type it should be?\n    @observable items       : M[] = []       // they fill from cache only! don't fill it from the update method\n    @observable filters     : object = {}\n    @observable order_by    : string[] = []\n    @observable page        : number = 0\n    @observable page_size   : number = 50\n    @observable is_ready    : boolean = false   // it set to true when we have got data from API at least one time \n    @observable is_updating : boolean = false   // true => we have requesting data from api\n    @observable error       : string = '' \n\n    private disposers = []\n    private disposer_objects = {}\n\n    //\n    constructor(model: any, filters?: object, order_by?: string[], page?: number, page_size?: number) {\n        this.model = model\n        if (filters  ) this.filters   = filters\n        if (order_by ) this.order_by  = order_by\n        if (page     ) this.page      = page\n        if (page_size) this.page_size = page_size\n        makeObservable(this)\n\n        this.update() // update when query is created\n\n        // update if query is changed\n        this.disposers.push(reaction(\n            () => {\n                return {\n                    filter   : this.filters,\n                    order_by : this.order_by,\n                    page     : this.page,\n                    page_size: this.page_size\n                }\n            }, \n            () => {\n                this.update()\n            }\n        ))\n\n        // watch to the cache for changes, and update items if needed\n        this.disposers.push(observe(this.model.cache, (change: any) => {\n            if (change.type == 'add') {\n                let __id = change.name\n                let obj  = change.newValue\n\n                if (this.should_be_in_the_list(obj, this.filters))\n                    this.items.push(obj)\n\n                this.disposer_objects[__id] = reaction(\n                    () => {\n                        return this.should_be_in_the_list(obj, this.filters)\n                    }, \n                    (shold_be_in_the_list) => {\n                        let i = this.items.indexOf(obj)\n                        if (shold_be_in_the_list && i == -1)\n                            this.items.push(obj)\n                        if (!shold_be_in_the_list && i != -1)\n                            this.items.splice(i, 1)\n                    } \n                )\n            }\n            if (change.type == \"delete\") {\n                let __id = change.name\n                let obj  = change.oldValue\n                this.disposer_objects[__id]()\n                delete this.disposer_objects[__id]\n                let i = this.items.indexOf(obj)\n                if (i != -1)\n                    this.items.splice(i, 1)\n            }\n        }))\n    }\n\n    // query should be destroyed explicitly\n    destroy() {\n        for(let disposer of this.disposers) disposer()\n    }\n\n    @action update(): Promise<M[]> {\n        this.is_updating = true\n        return this.model.adapter.load(\n            this.filters, \n            this.order_by, \n            this.page_size, \n            this.page*this.page_size\n        )\n        .catch((err) => { \n            runInAction(() => this.error = err)\n        })\n        .finally(() => {\n            runInAction(() => this.is_ready = true)\n            runInAction(() => this.is_updating = false)\n        } )\n    }\n\n    //\n    private should_be_in_the_list(obj, filters) {\n        if (Object.keys(filters).length) {\n            for(let key in filters) {\n                if (obj[key] != filters[key])\n                    return false\n            }\n            return true\n        }\n        else\n            return true\n    }\n\n    // TODO: convert observeble to promise?\n    ready(): Promise<Boolean> {\n        return new Promise((resolve, reject) => { \n            autorun((reaction) => {\n                if (this.is_ready) {\n                    reaction.dispose()\n                    resolve(this.is_ready) \n                }\n            })\n        })\n    }\n\n}\n\n","import { action, computed, makeObservable, observable, runInAction } from 'mobx'\nimport Adapter from './adapters/adapter'\nimport Query from './query'\n\n\nexport abstract class Model {\n\n    // this private static properties will be copied to real model in the model decorator\n    private static ids          : any[]\n    private static adapter      : Adapter<Model>\n    private static cache        : Map<string, Model>\n    private static fields       : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }\n    }\n\n\n    static load(filter = {}, order_by: string[] = [], page: number = 0, page_size: number = 50) {\n        return new Query(this, filter, order_by, page, page_size)\n    }\n\n    static clearCache() {\n        // we need it for run triggers on id fields \n        for (let obj of this.cache.values()) {\n            for (let id_field_name of this.ids) {\n                obj[id_field_name] = null\n            }\n        }\n    }\n\n    // TODO push it to utils\n    static __id(obj, ids: []) : string | null {\n        let id = '' \n        for (let id_name of ids) {\n            // if any id field is null then we should return null because id is not complite\n            if (obj[id_name] === null || obj[id_name] === undefined) \n                return null\n            id += `${obj[id_name]} :`\n        }\n        return id\n    }\n\n    private readonly _init_data\n    private disposers = new Map()\n\n    constructor (...args) { }\n\n    // build id string from ids fields and return it\n    @computed get __id() : string | null {\n        return Model.__id(this, this.model.ids)\n    }\n\n    // TODO: any is band-aid \n    get model() : any {\n        return (<any>this.constructor).__proto__\n    }\n\n    // create or update object in the repo \n    async save() {\n        return this.model.adapter.save(this)\n    }\n\n    // delete object from the repo \n    async delete() {\n        await this.model.adapter.delete(this)\n        // reset ids\n        for(let id_name of this.model.ids)\n            this[id_name] = null\n    }\n\n    // add obj to the cache\n    @action inject() {\n        if (this.__id === null)                    \n            throw new Error(`Object should have id!`)\n        if (this.model.cache.has(this.__id)) {\n            throw new Error(`Object with id \"${this.__id}\" already exist in the cache of model: \"${this.model.name}\")`)\n        }\n        this.model.cache.set(this.__id, this)\n    }\n\n    // remove obj from the cache\n    @action eject() {\n        if (this.__id === null)\n            return                   \n        if (!this.model.cache.has(this.__id)) \n            throw new Error(`Object with id \"${this.__id}\" not exist in the cache of model: ${this.model.name}\")`)\n        this.model.cache.delete(this.__id)\n    }\n}\n\n\n// Decorator\nexport function model(constructor) {\n    var original = constructor\n\n    original.cache = observable(new Map())\n    // makeObservable(original, { cache: observable })\n\n    // the new constructor\n    let f : any = function (...args) {\n        // let c : any = function () { return original.apply(this, args) }\n        let c : any = class extends original { constructor (...args) { super(...args) } }\n\n        c.__proto__ = original\n        // c.prototype = original.prototype\n        let obj = new c()\n        makeObservable(obj)\n        // we have to save init data for detect changes\n        obj._init_data = args[0] ? args[0] : {}\n\n        // save default values from class declaration to init_data\n        for (let field_name in obj.model.fields) {\n            if (obj._init_data[field_name] === undefined && obj[field_name] !== undefined) {\n                obj._init_data[field_name] = obj[field_name]\n            }\n        }\n\n        // apply fields decorators\n        for (let field_name in obj.model.fields) {\n            obj.model.fields[field_name].decorator(obj, field_name)\n        }\n\n        runInAction(() => {\n            // push init_data to object \n            // ids should be the last\n            let ids = []\n            for (let field_name in obj._init_data) {\n                if (obj.model.ids && obj.model.ids.includes(field_name))\n                    ids.push(field_name)\n                else\n                    obj[field_name] = obj._init_data[field_name]\n            }\n            for (let field_name of ids) {\n                obj[field_name] = obj._init_data[field_name]\n            }\n        })\n\n        return obj\n    }\n\n    f.__proto__ = original\n    f.prototype = original.prototype   // copy prototype so intanceof operator still works\n    return f                      // return new constructor (will override original)\n}\n","import { Model } from '../model'\nimport Adapter  from './adapter'\n\n/*\n*/\n\nlet store = {}\n\nexport class LocalAdapter<M extends Model> implements Adapter<M> {\n    constructor(\n        private cls,\n        private store_name: string) {\n        store[store_name] = {}\n    }\n\n    async save(obj: M) : Promise<M> {\n        // create \n        if (obj.__id === null) {\n            // calculate and set new ID\n            let ids = [0]\n            for(let id of Object.keys(store[this.store_name])) {\n                ids.push(parseInt(id))\n            }\n            let max = Math.max.apply(null, ids)\n            for(let name_id of obj.model.ids) {\n                obj[name_id] = max + 1\n            }\n            store[this.store_name][obj.__id] = obj\n        }\n        // edit\n        else {\n            store[this.store_name][obj.__id] = obj\n        }\n        return obj\n    }\n    async delete(obj: M) : Promise<any> {\n        delete store[this.store_name][obj.__id]\n    }\n\n    load (where={}, order_by=[], limit=50, offset = 0) : Promise<M[]> {\n        throw('Not implemented')\n    }\n}\n\n// model decorator\nexport function local(api: string) {\n    return (cls) => {\n        let adapter = new LocalAdapter(cls, api)\n        cls.__proto__.adapter = adapter \n    }\n}\n","import { Model } from '../model'\nimport Adapter  from './adapter'\n\n/*\n*/\n\nexport class RestAdapter<M extends Model> implements Adapter<M> {\n    constructor(\n        private cls,\n        private http,\n        private api: string) {\n    }\n\n    async save(obj: M) : Promise<M> {\n        // gather data from obj\n        let data = {}\n        for(let field_name in obj.model.fields) {\n            if (obj[field_name] !== null) {\n                data[field_name] = obj[field_name]\n            }\n        }\n\n        if (obj.__id === null) {\n            // create \n            data = await this.http.post(`${this.api}/`, data)\n            // update values\n            for(let field_name in obj.model.fields) {\n                obj[field_name] = data[field_name]\n            }\n        }\n        else {\n            // edit\n            data = await this.http.put(`${this.api}/${obj.__id}/`, data)\n            // update values\n            for(let field_name in obj.model.fields) {\n                // do not touch the ids\n                if (!obj.model.ids.includes(field_name)) {\n                    obj[field_name] = data[field_name]\n                }\n            }\n        }\n        // push saved data to obj\n        return obj\n    }\n    async delete(obj: M) : Promise<any> {\n        return this.http.delete(`${this.api}/${obj.__id}/`)\n    }\n\n    async load (where={}, order_by=[], limit=50, offset = 0) : Promise<M[]> {\n        // TODO build query string \n        let query = ''\n\n        let data = await this.http.get(`${this.api}/?${query}`)\n\n        // init objects from data \n        let objs : M[] = []\n        for (let obj of data) {\n            objs.push(new this.cls(obj))\n        }\n        return objs\n    }\n}\n\n// model decorator\nexport function rest(http, api: string) {\n    return (cls) => {\n        let adapter = new RestAdapter(cls, http, api)\n        cls.__proto__.adapter = adapter \n    }\n}\n","import { observable, observe, intercept, extendObservable } from 'mobx'\n\n/*\n1. you can setup id only once!\nusing obj.id = x, new Obj({id: x}) or obj.save()\n\n2. save() has two behavior depend on id \n - id === undefined or null -> create object on remote storage and get it\n - id === some number       -> save object in remote storage \n\n3. if you want just load data to cache then you can use this \nnew Obj({id: x, ...})\n*/\n\nfunction field_ID (obj , field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // before changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && obj[field_name] !== null)\n            throw new Error(`You cannot change id field: ${field_name}. ${obj[field_name]} to ${change.newValue}`)\n        if (obj[field_name] !== null && change.newValue === null) {\n            try {\n                obj.eject()\n            }\n            catch (err) {\n                let ignore_error = `Object with id \"${obj.__id}\" not exist in the model cache: ${obj.model.name}\")`\n                if (err.name !== ignore_error)\n                    throw err\n            }\n        }\n        return change\n    })\n\n    // after changes\n    observe(obj, field_name, (change) => {\n        // if id is complete\n        if (obj.__id !== null) \n            obj.inject()\n    })\n\n}\n\n\nexport default function id(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.fields === undefined) model.fields = {}\n    if (model.ids    === undefined) model.ids = []\n\n    model.fields[field_name] = { decorator: field_ID }  // register field \n    model.ids.push(field_name)                          // register id\n\n}\n","import { extendObservable } from 'mobx'\n\n\n\nexport function field_field(obj, field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n}\n\n\nexport default function field(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.fields === undefined) model.fields = {}\n\n    model.fields[field_name] = { decorator: field_field }  // register field \n}\n","// import 'reflect-metadata'\nimport {intercept, observe, extendObservable, observable, autorun, when, reaction} from 'mobx'\n\nfunction field_foreign(obj, field_name) {\n    let edit_mode = false\n    let settings = obj.model.fields[field_name].settings\n    let foreign_model     = settings.foreign_model\n    let foreign_ids_names = settings.foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    reaction(\n        // watch on foreign cache for foreign object\n        () => {\n            let id = foreign_model.__id(obj, foreign_ids_names)\n            return id ? foreign_model.cache.get(id) : null\n        },\n        // update foreign field\n        (foreign_obj, prev, reaction) => {\n            obj[field_name] = foreign_obj ? foreign_obj : null \n        })\n\n    // Setter\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model == foreign_model)) {\n            throw new Error(`You can set only instance of \"${foreign_model.name}\" or null`)\n        }\n        return change\n    })\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let new_foreign_obj = change.newValue\n        let old_foreign_obj = change.oldValue\n\n        if (new_foreign_obj === old_foreign_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> A.b_id -> A.b -> A.b_id ...\n\n        edit_mode = true\n        try {\n            if (change.newValue === null) {\n                // if foreign set to null then reset ids on the obj\n                for (let id_name of foreign_ids_names) {\n                    obj[id_name] = null \n                }\n            }\n            else {\n                // if foreign set to obj then update ids from the obj's ids\n                let obj_ids = change.newValue.model.ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    // do not touch if it the same\n                    if (obj[foreign_ids_names[i]] != change.newValue[obj_ids[i]])\n                        obj[foreign_ids_names[i]]  = change.newValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // rollback changes!\n            if (change.oldValue === null) {\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = null \n                }\n            }\n            else {\n                let obj_ids = change.oldValue.model.ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n            throw e\n        }\n\n        // if foreign have the one then update the one\n        if (settings.one) {\n            if (old_foreign_obj) {\n                old_foreign_obj[settings.one] = null\n            }\n            if (new_foreign_obj) {\n                new_foreign_obj[settings.one] = obj \n            }\n        }\n\n    })\n}\n\n\nexport default function foreign(foreign_model: any, ...foreign_ids_names: string[]) {\n    foreign_model = foreign_model.__proto__ // band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.constructor\n        if (model.fields === undefined) model.fields = {}\n        // register field \n        model.fields[field_name] = { \n            decorator: field_foreign,\n            settings: {\n                foreign_model: foreign_model,\n                // if it is empty then try auto detect it (it works only with single id) \n                foreign_ids_names: foreign_ids_names.length ? foreign_ids_names : [`${field_name}_id`]\n            } \n        } \n\n        // TODO finish it\n        // watch on the foreign cache \n        // if foreign obj was created then it should be attached to foreign\n        // if foreign obj was deleted then it should be removed from foreign\n        // e.i. update foreign obj when foreign ids was changed\n        // reaction(() => foreign_model.cache, (value, prev_value, reaction) => {\n        //     debugger\n        // })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_one(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.fields[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.fields[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // 1. checks before set new changes\n    intercept(obj, <any>field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model === remote_model))\n                throw new Error(`You can set only instance of \"${remote_model.name}\" or null`)\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let old_remote_obj = change.oldValue\n        let new_remote_obj = change.newValue\n\n        if (new_remote_obj === old_remote_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> B.a_id -> A.b -> B.a_id ...\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote obj\n            if (old_remote_obj) {\n                for (let id_name of remote_foreign_ids_name) {\n                    old_remote_obj[id_name] = null \n                }\n            }\n            // set foreign ids on the remote obj \n            if (new_remote_obj) {\n                let obj_ids = obj.model.ids \n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]] = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\n\nexport default function one(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    remote_model = remote_model.__proto__ // band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.fields === undefined) model.fields = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.fields[field_name] = { \n            decorator: field_one,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.disposers.set(`one ${field_name}` ,autorun(() => {\n                        let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            // TODO: is it not bad?\n                            // if (obj[field_name])\n                            //     // TODO better name of error\n                            //     // TODO add test for this case\n                            //     throw ('One: bad')\n                            runInAction(() => { obj[field_name] = remote_obj })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.disposers.get(`one ${field_name}`)) {\n                        remote_obj.disposers.get(`one ${field_name}`)()\n                        remote_obj.disposers.delete(`one ${field_name}`)\n                    }\n                    let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) \n                        runInAction(() => { obj[field_name] = null })\n                    break\n            }\n        })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_many(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.fields[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.fields[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: []\n    })\n\n    // 1. checks before set new changes\n    intercept(obj[field_name], (change: any) => {\n        // TODO\n        // if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor === remote_model.__proto__))\n        //         throw new Error(`You can set only instance of \"${remote_model.__proto__.name}\" or null`)\n\n        // TODO: if we push exist obj then ignore it? and not duplicate\n        // TODO: create a test for this case \n        // remote obj can be in the many \n        // for (let new_remote_obj of change.added) {\n        //     const i = obj[field_name].indexOf(new_remote_obj)\n        //     if (i == -1)\n        //         throw new Error(`\"${new_remote_obj.model.name}\" id:\"${new_remote_obj.__id}\" alredy in many \"${obj.model.name}\" id:\"${field_name}\"`)\n        // }\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj[field_name], (change:any) => {\n        if (change.type !== 'splice')\n            return \n\n        let old_remote_objs = change.removed\n        let new_remote_objs = change.added\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote objs\n            for(let old_remote_obj of old_remote_objs)\n                for (let id_name of remote_foreign_ids_name)\n                    old_remote_obj[id_name] = null \n            // set foreign ids on the remote objs \n            let obj_ids = obj.model.ids \n            for(let new_remote_obj of new_remote_objs) {\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]]  = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\nexport default function many(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.fields === undefined) model.fields = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.fields[field_name] = { \n            decorator: field_many,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.disposers.set(`many ${field_name}` ,autorun(() => {\n                        let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            const i = obj[field_name].indexOf(remote_obj)\n                            if (i == -1)\n                                runInAction(() => { obj[field_name].push(remote_obj) })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.disposers.get(`many ${field_name}`)) {\n                        remote_obj.disposers.get(`many ${field_name}`)()\n                        remote_obj.disposers.delete(`many ${field_name}`)\n                    }\n                    let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) {\n                        const i = obj[field_name].indexOf(remote_obj)\n                        if (i > -1)\n                            runInAction(() => { obj[field_name].splice(i, 1); })\n                    } \n                    break\n            }\n        })\n    }\n}"],"names":["Query","[object Object]","model","filters","order_by","page","page_size","Object","this","makeObservable","update","disposers","push","reaction","filter","observe","cache","change","type","__id","name","obj","newValue","should_be_in_the_list","items","disposer_objects","shold_be_in_the_list","i","indexOf","splice","oldValue","disposer","is_updating","adapter","load","catch","err","runInAction","error","finally","is_ready","keys","length","key","Promise","resolve","reject","autorun","dispose","__decorate","observable","action","Model","args","Map","values","id_field_name","ids","id","id_name","undefined","constructor","__proto__","save","delete","Error","has","set","original","f","c","super","_init_data","field_name","fields","decorator","includes","prototype","computed","store","LocalAdapter","cls","store_name","parseInt","max","Math","apply","name_id","where","limit","offset","local","api","RestAdapter","http","data","post","put","get","objs","rest","field_ID","extendObservable","intercept","eject","ignore_error","inject","field_field","field","field_foreign","edit_mode","settings","foreign_model","foreign_ids_names","foreign_obj","prev","new_foreign_obj","old_foreign_obj","obj_ids","e","one","foreign","field_one","remote_model","remote_foreign_ids_name","remote_foreign_ids_names","old_remote_obj","new_remote_obj","toLowerCase","remote_change","remote_obj","field_many","old_remote_objs","removed","new_remote_objs","added","many"],"mappings":"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"}
{"version":3,"file":"mobx-orm.es2015.js","sources":["../src/filters.ts","../src/query-base.ts","../src/query.ts","../src/query-page.ts","../src/model.ts","../src/adapters/adapter.ts","../src/adapters/local.ts","../src/fields/id.ts","../src/fields/field.ts","../src/fields/foreign.ts","../src/fields/one.ts","../src/fields/many.ts"],"sourcesContent":["import { action, makeObservable, observable } from \"mobx\"\nimport Query from \"./query\" \n\n\nexport enum FilterType {\n    EQ, NOT_EQ,\n    IN, NOT_IN,\n    AND, OR,\n}\n\nexport class Filter {\n    readonly    field: string\n    @observable type : FilterType \n    @observable value: any\n                options: Query<any> // use it for UI when we need to show options for select\n\n    constructor(type: FilterType = null, field: string = null, value: any) {\n        this.type  = type \n        this.field = field\n        this.value = value\n        if (type === FilterType.IN && this.value === undefined) this.value = []\n        makeObservable(this)\n    }\n    @action setFromURI(uri: string) {\n        let search_params = new URLSearchParams(uri)\n        let value = search_params.get(this.getURIField()) \n        switch (this.type) {\n            case FilterType.EQ:\n                this.value = value  \n                break\n            case FilterType.IN:\n                this.value = value ? value.split(',') : [] \n                break\n            case FilterType.AND:\n                for(let child of this.value) {\n                    child.setFromURI(uri) \n                }\n                break\n            case FilterType.OR:\n            default:\n                return '' \n        }\n    }\n    getURIField(): string {\n        switch (this.type) {\n            case FilterType.EQ:\n                return `${this.field}__eq` \n            case FilterType.IN:\n                return `${this.field}__in`\n            case FilterType.AND:\n            case FilterType.OR:\n            default:\n                return '' \n        }\n    }\n    getURLSearchParams(): URLSearchParams{\n        let search_params = new URLSearchParams()\n        switch (this.type) {\n            case FilterType.EQ:\n                this.value && search_params.set(this.getURIField(), this.value)\n                break\n            case FilterType.IN:\n                this.value?.length && search_params.set(this.getURIField(), this.value)\n                break\n            case FilterType.AND:\n                for(let filter of this.value) {\n                    let child = filter.getURLSearchParams() \n                    child.forEach((value, key) => search_params.set(key, value))\n                }\n                break\n            case FilterType.OR:\n            default:\n        }\n        return search_params\n    }\n    is_match(obj: any) : boolean {\n        let path, value\n        switch (this.type) {\n            case FilterType.EQ:\n                if (this.value === undefined) return true\n                path = this.field.split('__')\n                value = obj \n                for(let field of path) {\n                    if (value === null) return false\n                    value = value[field] \n                    if (value === undefined) break\n                }\n                return value == this.value\n            case FilterType.IN:\n                if (this.value.length === 0) return true\n                path = this.field.split('__')\n                value = obj \n                for(let field of path) {\n                    if (value === null) return false\n                    value = value[field] \n                    if (value === undefined) break\n                }\n                for (let v of this.value) {\n                    if (v == value) return true\n                }\n                return false\n                // return this.value !== null && this.value.length ? this.value.includes(String(obj[this.field])) : true\n            case FilterType.AND:\n                for(let filter of this.value)\n                    if (!filter.is_match(obj))\n                        return false\n                return true \n            case FilterType.OR:\n                if (!this.value.length) return true\n                for(let filter of this.value)\n                    if (filter.is_match(obj))\n                        return true \n                return false \n            default:\n                // unknown type of filter == any obj is match\n                return true \n        }\n    }\n}\n\nexport function EQ(field: string, value: any = undefined) : Filter {\n    return new Filter(FilterType.EQ, field, value) \n}\n\nexport function IN(field: string, value: any[] = []) : Filter {\n    return new Filter(FilterType.IN, field, value) \n}\n\nexport function AND(...filters: Filter[]) : Filter {\n    return new Filter(FilterType.AND, null, filters) \n}\n\nexport function OR(...filters: Filter[]) : Filter {\n    return new Filter(FilterType.OR, null, filters) \n}\n","import { action, autorun, makeObservable, observable, reaction, runInAction } from \"mobx\"\nimport Adapter from \"./adapters/adapter\"\nimport { Model } from \"./model\"\nimport { Filter } from './filters'\n\nexport const ASC = true \nexport const DESC = false \nexport type ORDER_BY = Map<string, boolean>\n\n\nexport default abstract class Query<M extends Model> {\n\n    @observable filters     : Filter\n    @observable order_by    : ORDER_BY \n    @observable page        : number\n    @observable page_size   : number\n\n    @observable need_to_update: boolean     // set to true then filters/order_by/page/page_size was changed and back to false after load\n\n    abstract get items()\n\n    get is_loading () { return this.__is_loading  }\n    get is_ready   () { return this.__is_ready    }\n    get error      () { return this.__error       }\n    \n\treadonly __base_cache: any\n\treadonly __adapter: Adapter<M>\n    @observable __items: M[] = []\n    @observable __is_loading  : boolean = false \n    @observable __is_ready    : boolean = false \n    @observable __error       : string = '' \n\n    __disposers         : (()=>void)[] = []\n    __disposer_objects  : {[field: string]: ()=>void} = {}\n\n    constructor(adapter: Adapter<M>, base_cache: any, filters?: Filter, order_by?: ORDER_BY, page?: number, page_size?: number) {\n\t\tthis.__base_cache = base_cache\n\t\tthis.__adapter    = adapter\n        this.order_by = order_by ? order_by : new Map()\n        if (filters  ) this.filters   = filters\n        if (page\t ) this.page      = page\n        if (page_size) this.page_size = page_size\n        makeObservable(this)\n\n        this.__disposers.push(reaction(\n            () => { return { \n                filter          : this.filters?.getURLSearchParams(), \n                order_by        : this.order_by, \n                page            : this.page, \n                page_size       : this.page_size,\n             }},\n            () => { runInAction(() => this.need_to_update = true )}\n        ))\n    }\n\n    destroy() {\n        while(this.__disposers.length) {\n            this.__disposers.pop()()\n        }\n        for(let __id in this.__disposer_objects) {\n            this.__disposer_objects[__id]()\n            delete this.__disposer_objects[__id]\n        } \n    }\n\n    abstract __load(objs: M[])\n\n    // use it if everybody should know that the query data is updating\n    @action async load() {\n        this.__is_loading = true\n        try {\n            await this.shadowLoad()\n        }\n        finally {\n            runInAction(() => this.__is_loading = false)\n        }\n    }\n\n    // use it if nobody should know that you load data for the query\n    // for example you need to update the current data on the page and you don't want to show a spinner\n    @action async shadowLoad() {\n        try {\n            let objs = await this.__adapter.load(this.filters, this.order_by, this.page_size, this.page*this.page_size)\n            this.__load(objs)\n            runInAction(() => {\n                this.__is_ready = true\n                this.need_to_update = false \n            })\n        }\n        catch(e) {\n            runInAction(() => this.__error = e)\n            throw e\n        }\n    }\n\n    // use it if you need use promise instead of observe is_ready\n    ready(): Promise<Boolean> {\n        return new Promise((resolve, reject) => { \n            autorun((reaction) => {\n                if (this.__is_ready) {\n                    reaction.dispose()\n                    resolve(this.__is_ready) \n                }\n            })\n        })\n    }\n\n    // use it if you need use promise instead of observe is_loading\n    loading(): Promise<Boolean> {\n        return new Promise((resolve, reject) => { \n            autorun((reaction) => {\n                if (!this.__is_loading) {\n                    reaction.dispose()\n                    resolve(!this.__is_loading) \n                }\n            })\n        })\n    }\n}\n","import { autorun, computed, observe, reaction, runInAction } from 'mobx'\nimport { Model } from './model'\nimport Adapter from './adapters/adapter'\nimport QeuryBase, { ASC, DESC, ORDER_BY } from './query-base'\nimport { Filter } from './filters'\n\n/*\nReactive items:\n- delete from the cache -> delete from items\n- add to the cache \n    - the new obj is match the filters  -> add the obj to items\n- obj was changed \n    - не было но уже    попадание по фильтрам -> add the obj to items\n    -    было но уже не попадание по фильтрам -> remove the obj from items\n*/\n\nexport default class Query<M extends Model> extends QeuryBase<M> {\n\n    constructor(adapter: Adapter<M>, base_cache: any, filters?: Filter, order_by?: ORDER_BY) {\n        super(adapter, base_cache, filters, order_by)\n\n        // watch the cache for changes, and update items if needed\n        this.__disposers.push(observe(this.__base_cache, (change: any) => {\n\n            if (change.type == 'add') {\n                this.__watch_obj(change.newValue)\n            }\n            if (change.type == \"delete\") {\n                let __id = change.name\n                let obj  = change.oldValue\n\n                this.__disposer_objects[__id]()\n                delete this.__disposer_objects[__id]\n\n                let i = this.__items.indexOf(obj)\n                if (i != -1)\n                    runInAction(() => {\n                        this.__items.splice(i, 1)\n                    })\n            }\n        }))\n\n        // I think it does not make sense, but it make sense for QueryPage!\n        // this.__disposers.push(reaction(\n        //     () => this.need_to_update,\n        //     (value) => {\n        //         if (value && !this.__is_loading)\n        //             for(let [id, obj] of this.__base_cache) {\n        //                 this.__watch_obj(obj)\n        //             }\n        //     }\n        // ))\n\n        // ch all exist objects of model \n        for(let [id, obj] of this.__base_cache) {\n            this.__watch_obj(obj)\n        }\n    }\n\n    @computed\n    get items() { \n        let __items = this.__items.map(x=>x) // copy __items (not deep)\n        if (this.order_by.size) {\n            let compare = (a, b) => {\n                for(const [key, value] of this.order_by) {\n                    if (value === ASC) {\n                        if ((a[key] === undefined || a[key] === null) && (b[key] !== undefined && b[key] !== null)) return  1\n                        if ((b[key] === undefined || b[key] === null) && (a[key] !== undefined && a[key] !== null)) return -1\n                        if (a[key] < b[key]) return -1\n                        if (a[key] > b[key]) return  1\n                    }\n                    else {\n                        if ((a[key] === undefined || a[key] === null) && (b[key] !== undefined && b[key] !== null)) return -1\n                        if ((b[key] === undefined || b[key] === null) && (a[key] !== undefined && a[key] !== null)) return  1\n                        if (a[key] < b[key]) return  1\n                        if (a[key] > b[key]) return -1\n                    }\n                }\n                return 0\n            }\n            __items.sort(compare)\n        }\n        return __items \n    }\n\n    __load(objs: M[]) {\n        // Query don't need to overide the items, query's items should be get only from the cache\n        // Query page have to use it only \n    }\n\n    __watch_obj(obj) {\n        if (this.__disposer_objects[obj.__id]) this.__disposer_objects[obj.__id]()\n        this.__disposer_objects[obj.__id] = autorun(\n            () => {\n                let should = !this.filters || this.filters.is_match(obj)\n                let i = this.__items.indexOf(obj)\n                // should be in the items and it is not in the items? add it to the items\n                if ( should && i == -1) runInAction(() => this.__items.push(obj))\n                // should not be in the items and it is in the items? remove it from the items\n                if (!should && i != -1) runInAction(() => this.__items.splice(i, 1))\n            }\n        )\n    }\n}\n","import { reaction, runInAction } from \"mobx\"\nimport { Model } from \"./model\"\nimport Adapter from \"./adapters/adapter\"\nimport QueryBase, { ORDER_BY } from './query-base'\nimport { Filter } from \"./filters\"\n\n\n// TODO: implement need_to_update\n\nexport default class Query<M extends Model> extends QueryBase<M> {\n\n    __load(objs: M[]) {\n        runInAction(() => { \n            this.__items.splice(0, this.__items.length)\n            this.__items.push(...objs)\n        })\n    }\n\n    get items() { return this.__items }\n    // TODO: add actions for QueryBase and QueryPage\n    // TODO: Query should know nothing about pages!\n    // @action setFilters(filters : any     ) { this.filters  = filters  }\n    // @action setOrderBy(order_by: string[]) { this.order_by = order_by }\n    // @action firstPage() { this.page = 0 }\n    // @action prevPage () { this.page = this.page < 0 ? this.page - 1 : 0 }\n    // @action nextPage () { this.page = this.page + 1 }\n    // @action lastPage () { this.page = 9999 } // TODO: need to know total row count\n    // @action setPageSize(page_size: number) { this.page_size = page_size }\n\n\n    constructor(adapter: Adapter<M>, base_cache: any, filters?: Filter, order_by?: ORDER_BY, page?: number, page_size?: number) {\n        super(adapter, base_cache, filters, order_by)\n        runInAction(() => {\n            if(this.page === undefined) this.page = 0\n            if(this.page_size === undefined) this.page_size = 50\n        })\n    }\n}\n","import { action, computed, makeObservable, observable, runInAction } from 'mobx'\nimport Adapter   from './adapters/adapter'\nimport Query     from './query'\nimport QueryPage from './query-page'\nimport { Filter } from './filters'\nimport { ORDER_BY } from './query-base'\n\n\nexport type RawObject = any \nexport type RawData   = any \n\n// NOTE:\n// the __  prefix of naming - I borrow it from python. \n// It means don't use it but if you have no choice then you can use it.\n\nexport abstract class Model {\n    static __id_separator : string = '-'\n    // this static properties will be copied to real model in the model decorator\n    static __adapter  : Adapter<Model> \n    static __cache    : Map<string, Model>\n    // we have 3 types of fields\n    // - ids (cannot be changed, order of keys is important)\n    // - fields\n    // - relations (not exist on outside)\n    static __ids: Map<string, {\n            // can decorator be different?\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }>\n    static __fields       : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }\n    }\n    // relateions is a list of field only foreign, one or many types\n    static __relations : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any\n            // there is no serializer of deserializer because \n            // it is derivative and does not come from outside\n        }\n    }\n\n    // add obj to the cache\n    @action static inject(obj: Model) {\n        if (obj.__id === null)                    \n            throw new Error(`Object should have id!`)\n        if (this.__cache.has(obj.__id)) {\n            throw new Error(`Object with id \"${obj.__id}\" already exist in the cache of model: \"${this.name}\")`)\n        }\n        this.__cache.set(obj.__id, obj)\n    }\n\n    // remove obj from the cache\n    @action static eject(obj: Model) {\n        if (obj.__id === null)\n            return                   \n        if (!this.__cache.has(obj.__id)) \n            throw new Error(`Object with id \"${obj.__id}\" not exist in the cache of model: ${this.name}\")`)\n        this.__cache.delete(obj.__id)\n    }\n\n    // TODO: implement find method, it should load single object from Adapter\n    // and add find method to Adapter too\n    static async find(filters: Filter) : Promise<Model> {\n        return this.__adapter.find(filters) \n    }\n\n    static getQuery(filters?: Filter, order_by?: ORDER_BY): Query<Model>  {\n        return new Query<Model>(this.__adapter, this.__cache, filters, order_by)\n    }\n\n    static getQueryPage(filter?: Filter, order_by?: ORDER_BY, page?: number, page_size?: number): QueryPage<Model> {\n        return new QueryPage(this.__adapter, this.__cache, filter, order_by, page, page_size)\n    }\n\n    // return obj from the cache\n    static get(__id: string) {\n        return this.__cache.get(__id)\n    }\n\n    // TODO: what is it?\n    static filter(): Array<Model> {\n        let objs: Array<Model> = [] \n\n        return objs\n    }\n\n    @action static updateCache(raw_obj): Model {\n        let __id = this.__id(raw_obj)\n        let obj: Model\n        if (this.__cache.has(__id)) {\n            runInAction(() => {\n                obj = this.__cache.get(__id)\n                obj.updateFromRaw(raw_obj)\n            })\n        }\n        else {\n            obj = new (<any>this)(raw_obj)\n        }\n        return obj\n    }\n\n    static clearCache() {\n        runInAction(() => {\n            // for clear cache we need just to set null into id fields\n            for (let obj of this.__cache.values()) {\n                for (let id_field_name of this.__ids.keys()) {\n                    obj[id_field_name] = null\n                }\n            }\n        })\n    }\n\n    static __id(obj, ids?) : string | null {\n        let id = '' \n        if (ids === undefined) ids = Array.from(this.__ids.keys()) \n        for (let id_field_name of ids) {\n            // if any id field is null then we should return null because id is not complite\n            if (obj[id_field_name] === null || obj[id_field_name] === undefined) \n                return null\n            id += `${obj[id_field_name]}${this.__id_separator}`\n        }\n        id = id.slice(0, -(this.__id_separator.length))\n        return id\n    }\n\n    __init_data: any   \n    __disposers = new Map()\n\n    constructor (...args) { }\n\n    @computed get __id() : string | null {\n        return this.model.__id(this)\n    }\n\n    get model() : any {\n        return (<any>this.constructor).__proto__\n    }\n\n    // it is raw_data + ids\n    get raw_obj() : any {\n        let raw_obj: any = this.raw_data\n        for(let id_field_name of this.model.__ids.keys()) {\n            if(this[id_field_name] !== undefined) {\n                raw_obj[id_field_name] = this[id_field_name]\n            }\n        }\n        raw_obj.__id = this.__id\n        return raw_obj\n    }\n\n    // data only from fields (no ids)\n    get raw_data() : any {\n        let raw_data: any = {}\n        for(let field_name in this.model.__fields) {\n            if(this[field_name] !== undefined) {\n                raw_data[field_name] = this[field_name]\n            }\n        }\n        return raw_data\n    }\n    \n    get only_changed_raw_data() : any {\n        let raw_data: any = {}\n        for(let field_name in this.model.__fields) {\n            if(this[field_name] !== undefined && this[field_name] != this.__init_data[field_name]) {\n                raw_data[field_name] = this[field_name]\n            }\n        }\n        return raw_data\n    }\n\n    get is_changed() : boolean {\n        let is_changed = false\n        for(let field_name in this.model.__fields) {\n            if (this[field_name] != this.__init_data[field_name]) {\n                is_changed = true\n            }\n        }\n        return is_changed \n    }\n\n    async create() { return await this.model.__adapter.create(this) }\n    async update() { return await this.model.__adapter.update(this) }\n    async delete() { return await this.model.__adapter.delete(this) }\n    async save  () { return this.__id === null ? this.create() : this.update() }\n\n    @action refresh_init_data() {\n        if(this.__init_data === undefined) this.__init_data = {}\n        for (let field_name in this.model.__fields) {\n            this.__init_data[field_name] = this[field_name]\n        }\n    }\n\n    @action updateFromRaw(raw_obj) {\n        // update the keys only if they are not defined\n        for (let id_field_name of this.model.__ids.keys()) {\n            if (this[id_field_name] === null || this[id_field_name] === undefined) {\n                this[id_field_name] = raw_obj[id_field_name]\n            }\n        }\n        // update the fields if the raw data is exist and it is different \n        for(let field_name in this.model.__fields) {\n            if (raw_obj[field_name] !== undefined && raw_obj[field_name] !== this[field_name]) {\n                this[field_name] = raw_obj[field_name]\n            }\n        }\n    }\n\n}\n\n\n// Decorator\nexport function model(constructor) {\n    var original = constructor\n\n    original.__cache = observable(new Map())\n\n    // the new constructor\n    let f : any = function (...args) {\n        let c : any = class extends original { constructor (...args) { super(...args) } }\n            c.__proto__ = original\n\n        let obj   = new c()\n        let model = obj.model\n        makeObservable(obj)\n\n        if (model.__ids === undefined) \n            throw(`No one id field was declared on model ${model.name}`)\n\n        // apply id-fields decorators\n        for (let id_field_name of model.__ids.keys()) {\n            model.__ids.get(id_field_name).decorator(obj, id_field_name)\n        }\n        // apply fields decorators\n        for (let field_name in model.__fields) {\n            model.__fields[field_name].decorator(obj, field_name)\n        }\n        // apply __relations decorators\n        for (let field_name in model.__relations) {\n            model.__relations[field_name].decorator(obj, field_name)\n        }\n\n        runInAction(() => {\n            // update the object from args\n            if (args[0]) {\n                let raw_obj = args[0]\n                // id-fields\n                for (let id_field_name of model.__ids.keys()) {\n                    if (raw_obj[id_field_name] !== undefined) {\n                        obj[id_field_name] = raw_obj[id_field_name]\n                    }\n                }\n                // fields \n                for (let field_name in model.__fields) {\n                    if (raw_obj[field_name] !== undefined) {\n                        obj[field_name] = raw_obj[field_name]\n                    }\n                }\n            }\n        })\n        obj.refresh_init_data()\n        return obj\n    }\n\n    f.__proto__ = original\n    f.prototype = original.prototype   // copy prototype so intanceof operator still works\n    return f                      // return new constructor (will override original)\n}\n","import { runInAction } from 'mobx'\nimport { Model, RawObject, RawData } from '../model'\n\n\nexport default abstract class  Adapter<M extends Model> {\n\n    abstract __create(raw_data: RawData): Promise<RawObject>\n    abstract __update(obj_id: string, only_changed_raw_data: RawData): Promise<RawObject>\n    abstract __delete(obj_id: string): Promise<void>\n    abstract __find(where): Promise<object>\n    abstract __load(where?, order_by?, limit?, offset?): Promise<RawObject[]>\n    abstract getTotalCount(where?): Promise<number>\n\n    readonly model: any\n\n    constructor(model: any) {\n        this.model = model \n    }\n\n    async create(obj: M) : Promise<M> {\n        let raw_obj = await this.__create(obj.raw_data)\n        obj.updateFromRaw(raw_obj)\n        obj.refresh_init_data() // backend can return default values and they should be in __init_data\n        return obj\n    }\n\n    async update(obj: M) : Promise<M> {\n        let raw_obj = await this.__update(obj.__id, obj.only_changed_raw_data)\n        obj.updateFromRaw(raw_obj)\n        obj.refresh_init_data()\n        return obj\n    }\n\n    async delete(obj: M) : Promise<M> {\n        await this.__delete(obj.__id)\n        for(let id_field_name of this.model.__ids.keys())\n            obj[id_field_name] = null\n        return obj\n    }\n\n    /* Returns ONE object */\n    async find(where): Promise<M> {\n        let raw_obj = await this.__find(where)\n        return this.model.updateCache(raw_obj)\n    }\n\n    /* Returns MANY objects */\n    async load(where?, order_by?, limit?, offset?):Promise<M[]> {\n        let raw_objs = await this.__load(where, order_by, limit, offset)\n        let objs: M[] = []\n        // it should be happend in one big action\n        runInAction(() => {\n            for (let raw_obj of raw_objs) {\n                objs.push(this.model.updateCache(raw_obj))\n            }\n        })\n        return objs\n    }\n}\n","import { Model, RawData, RawObject } from '../model'\nimport Adapter  from './adapter'\n\n/*\nYou can use this adapter for mock data or for unit test\n*/\n\n\nexport let store: any = {}\n\n\nfunction timeout(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nexport default class LocalAdapter<M extends Model> extends Adapter<M> {\n\n    readonly store_name: string\n\n    // delays for simulate real usage, use it only for tests\n    delay: number \n\n    init_local_data(data: RawObject[]) {\n        let objs = {} \n        for(let obj of data) {\n            objs[this.model.__id(obj)] = obj\n        }\n        store[this.store_name] = objs\n    }\n\n    constructor(model: any, store_name?: string) {\n        super(model)\n        this.store_name = store_name ? store_name : model.__proto__.name\n        store[this.store_name] = {}\n    }\n\n    async __create(raw_data: RawData) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n\n        // calculate and set new ID\n        let ids = [0]\n        for(let id of Object.keys(store[this.store_name])) {\n            ids.push(parseInt(id))\n        }\n        let max = Math.max.apply(null, ids)\n        for(let field_name_id of this.model.__ids.keys()) {\n            raw_data[field_name_id] = max + 1\n        }\n\n        raw_data.__id = this.model.__id(raw_data)\n        store[this.store_name][raw_data.__id] = raw_data\n        return raw_data as RawObject \n    }\n\n    async __update(obj_id: string, only_changed_raw_data: RawData) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n        let raw_obj = store[this.store_name][obj_id] \n        for(let field of Object.keys(only_changed_raw_data)) {\n            raw_obj[field] = only_changed_raw_data[field]\n        }\n        return raw_obj \n    }\n\n    async __delete(obj_id: string) : Promise<void> {\n        if (this.delay) await timeout(this.delay) \n        delete store[this.store_name][obj_id]\n    }\n\n    async __find(where) : Promise<RawObject> {\n        if (this.delay) await timeout(this.delay) \n        // TODO: apply where, and throw error if no obj or multi objs\n        let raw_obj = Object.values(store[this.store_name])[0]\n        return raw_obj\n    }\n\n    async __load (where?, order_by?, limit?, offset?) : Promise<RawObject[]> {\n        if (this.delay) await timeout(this.delay) \n        let raw_objs = []\n        // filter\n        if (where) {\n            for(let raw_obj of Object.values(store[this.store_name])) {\n\n            }\n        }\n        else {\n            raw_objs = Object.values(store[this.store_name])\n        }\n\n        // order_by (sort)\n        if (order_by) {\n            raw_objs = raw_objs.sort((obj_a, obj_b) => {\n                let res\n                for(let sort_by_field of order_by) {\n\n                }\n                return 0\n            })\n        }\n\n        // page\n        if (limit !== undefined && offset !== undefined) {\n            raw_objs = raw_objs.slice(offset, offset+limit)\n        }\n        return raw_objs \n    }\n\n    async getTotalCount(where?): Promise<number> {\n        let objs = []\n        // Object.values(store[this.store_name])\n        return objs.length\n    }\n}\n\n\n// model decorator\nexport function local() {\n    return (cls: any) => {\n        let adapter = new LocalAdapter(cls)\n        cls.__proto__.__adapter = adapter \n    }\n}\n\n// TODO: where example\n// let where = [\n//             [\"field_a\", \"==\", 10, \"and\", \"field_b == 20\"],\n//     \"or\",   [\"field_a\", \"<=\",  5, \"and\", \"field_b\", \"contain\", \"test\"]\n// ]\n","import { observable, observe, intercept, extendObservable } from 'mobx'\nimport { RawObject } from '../model'\n\n/*\n1. you can setup id only once!\nusing obj.id = x, new Obj({id: x}) or obj.save()\n\n2. save() has two behavior depend on id \n - id === undefined or null -> create object on remote storage and get it\n - id === some number       -> save object in remote storage \n\n3. if you want just load data to cache then you can use this \nnew Obj({id: x, ...})\n*/\n\nfunction field_ID (obj , field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // before changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && obj[field_name] !== null)\n            throw new Error(`You cannot change id field: ${field_name}. ${obj[field_name]} to ${change.newValue}`)\n        if (obj[field_name] !== null && change.newValue === null) {\n            try {\n                obj.model.eject(obj)\n            }\n            catch (err) {\n                let ignore_error = `Object with id \"${obj.__id}\" not exist in the model cache: ${obj.model.name}\")`\n                if (err.name !== ignore_error)\n                    throw err\n            }\n        }\n        return change\n    })\n\n    // after changes\n    observe(obj, field_name, (change) => {\n        // if id is complete\n        if (obj.__id !== null) \n            obj.model.inject(obj)\n    })\n\n}\n\n\nexport default function id(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.__ids === undefined) model.__ids = new Map()\n    model.__ids.set(field_name, { decorator: field_ID })\n}\n\nabstract class ModelX {\n    get raw_obj() : any {\n        return {}\n    }\n}\n\nfunction ModelExt<T>() {\n  abstract class Model extends ModelX{\n    /* static methods */\n    public static list: T[] = [];\n    public static async fetch(): Promise<T[]> {\n      return null!;\n    }\n    /*  instance methods */\n    public save(): Promise<T> {\n      return null!\n    }\n  }\n  return Model;\n}\nclass User extends ModelExt<User>() {\n}\nlet users: Promise<User[]> = User.fetch()\n\n\nabstract class  Adapter<M extends ModelX> {\n\n    // abstract getTotalCount: (where?) => Promise<number>\n    abstract __create(obj: RawObject): Promise<object>\n    abstract __update(obj: RawObject): Promise<object>\n    abstract __delete(obj: RawObject): Promise<object>\n    abstract __find(where): Promise<object>\n    abstract __load(where?, order_by?, limit?, offset?): Promise<RawObject[]>\n    abstract getTotalCount(where?): Promise<number>\n\n    readonly model: any\n\n    constructor(model: any) {\n        this.model = model \n    }\n\n    async create(obj: M) : Promise<M> {\n        let raw_obj = await this.__create(obj.raw_obj)\n        // obj.updateFromRaw(raw_obj)\n        // obj.refresh_init_data() // backend can return default values and they should be in __init_data\n        return obj\n    }\n}","import { extendObservable } from 'mobx'\n\n\n\nexport function field_field(obj, field_name) {\n    // make observable and set default value\n    extendObservable(obj, { [field_name]: obj[field_name] })\n}\n\n\nexport default function field(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.__fields === undefined) model.__fields = {}\n\n    model.__fields[field_name] = { decorator: field_field }  // register field \n}\n","import {intercept, observe, extendObservable, reaction} from 'mobx'\n\n\nfunction field_foreign(obj, field_name) {\n    let edit_mode = false\n    let settings = obj.model.__relations[field_name].settings\n    let foreign_model     = settings.foreign_model\n    let foreign_ids_names = settings.foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    reaction(\n        // watch on foreign cache for foreign object\n        () => {\n            let __id = foreign_model.__id(obj, foreign_ids_names)\n            return __id ? foreign_model.__cache.get(__id) : null\n        },\n        // update foreign field\n        (foreign_obj, prev, reaction) => {\n            obj[field_name] = foreign_obj ? foreign_obj : null \n        }\n    )\n\n    // Setter\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model == foreign_model)) {\n            throw new Error(`You can set only instance of \"${foreign_model.name}\" or null`)\n        }\n        return change\n    })\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let new_foreign_obj = change.newValue\n        let old_foreign_obj = change.oldValue\n\n        if (new_foreign_obj === old_foreign_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> A.b_id -> A.b -> A.b_id ...\n\n        edit_mode = true\n        try {\n            if (change.newValue === null) {\n                // if foreign set to null then reset ids on the obj\n                for (let id_name of foreign_ids_names) {\n                    obj[id_name] = null \n                }\n            }\n            else {\n                // if foreign set to obj then update ids from the obj's ids\n                let obj_ids: any = Array.from(change.newValue.model.__ids.keys())\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    // do not touch if it the same\n                    if (obj[foreign_ids_names[i]] != change.newValue[obj_ids[i]])\n                        obj[foreign_ids_names[i]]  = change.newValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // rollback changes!\n            if (change.oldValue === null) {\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = null \n                }\n            }\n            else {\n                let obj_ids = change.oldValue.model.__ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n            throw e\n        }\n\n        // if foreign have the one then update the one\n        if (settings.one) {\n            if (old_foreign_obj) {\n                old_foreign_obj[settings.one] = null\n            }\n            if (new_foreign_obj) {\n                new_foreign_obj[settings.one] = obj \n            }\n        }\n    })\n}\n\nexport default function foreign(foreign_model: any, ...foreign_ids_names: string[]) {\n    foreign_model = foreign_model.__proto__ // TODO: band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.constructor\n        if (model.__relations === undefined) model.__relations = {}\n        // register field \n        model.__relations[field_name] = { \n            decorator: field_foreign,\n            settings: {\n                foreign_model: foreign_model,\n                // if it is empty then try auto detect it (it works only with single id) \n                foreign_ids_names: foreign_ids_names.length ? foreign_ids_names : [`${field_name}_id`]\n            } \n        } \n    }\n}\n","import { intercept, observe, extendObservable, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_one(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.__relations[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.__relations[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.model === remote_model))\n                throw new Error(`You can set only instance of \"${remote_model.name}\" or null`)\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let old_remote_obj = change.oldValue\n        let new_remote_obj = change.newValue\n\n        if (new_remote_obj === old_remote_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> B.a_id -> A.b -> B.a_id ...\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote obj\n            if (old_remote_obj) {\n                for (let id_name of remote_foreign_ids_name) {\n                    old_remote_obj[id_name] = null \n                }\n            }\n            // set foreign ids on the remote obj \n            if (new_remote_obj) {\n                let obj_ids: any = Array.from(obj.model.__ids.keys())\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]] = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\n\nexport default function one(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    remote_model = remote_model.__proto__ // band-aid\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.__relations === undefined) model.__relations = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.__relations[field_name] = { \n            decorator: field_one,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.__cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.__disposers.set(`one ${field_name}` ,autorun(() => {\n                        let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            // TODO: is it not bad?\n                            // if (obj[field_name])\n                            //     // TODO better name of error\n                            //     // TODO add test for this case\n                            //     throw ('One: bad')\n                            runInAction(() => { obj[field_name] = remote_obj })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.__disposers.get(`one ${field_name}`)) {\n                        remote_obj.__disposers.get(`one ${field_name}`)()\n                        remote_obj.__disposers.delete(`one ${field_name}`)\n                    }\n                    let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) \n                        runInAction(() => { obj[field_name] = null })\n                    break\n            }\n        })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_many(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.__relations[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.__relations[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: []\n    })\n\n    // 1. checks before set new changes\n    intercept(obj[field_name], (change: any) => {\n        // TODO\n        // if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor === remote_model.__proto__))\n        //         throw new Error(`You can set only instance of \"${remote_model.__proto__.name}\" or null`)\n\n        // TODO: if we push exist obj then ignore it? and not duplicate\n        // TODO: create a test for this case \n        // remote obj can be in the many \n        // for (let new_remote_obj of change.added) {\n        //     const i = obj[field_name].indexOf(new_remote_obj)\n        //     if (i == -1)\n        //         throw new Error(`\"${new_remote_obj.model.name}\" id:\"${new_remote_obj.__id}\" alredy in many \"${obj.model.name}\" id:\"${field_name}\"`)\n        // }\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj[field_name], (change:any) => {\n        if (change.type !== 'splice')\n            return \n\n        let old_remote_objs = change.removed\n        let new_remote_objs = change.added\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote objs\n            for(let old_remote_obj of old_remote_objs)\n                for (let id_name of remote_foreign_ids_name)\n                    old_remote_obj[id_name] = null \n            // set foreign ids on the remote objs \n            let obj_ids: any = Array.from(obj.model.__ids.keys())\n            for(let new_remote_obj of new_remote_objs) {\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]]  = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\nexport default function many(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.__relations === undefined) model.__relations = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.__relations[field_name] = { \n            decorator: field_many,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.__cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.__disposers.set(`many ${field_name}` ,autorun(() => {\n                        let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            const i = obj[field_name].indexOf(remote_obj)\n                            if (i == -1)\n                                runInAction(() => { obj[field_name].push(remote_obj) })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.__disposers.get(`many ${field_name}`)) {\n                        remote_obj.__disposers.get(`many ${field_name}`)()\n                        remote_obj.__disposers.delete(`many ${field_name}`)\n                    }\n                    let obj =  model.__cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) {\n                        const i = obj[field_name].indexOf(remote_obj)\n                        if (i > -1)\n                            runInAction(() => { obj[field_name].splice(i, 1); })\n                    } \n                    break\n            }\n        })\n    }\n}"],"names":["Query","QeuryBase","QueryBase","QueryPage"],"mappings":"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"}
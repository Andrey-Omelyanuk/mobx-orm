{"version":3,"file":"mobx-orm.es2015.js","sources":["../src/query.ts","../src/model.ts","../src/adapters/local.ts","../src/adapters/rest.ts","../src/fields/id.ts","../src/fields/field.ts","../src/fields/foreign.ts","../src/fields/one.ts","../src/fields/many.ts"],"sourcesContent":["import { autorun, makeAutoObservable, makeObservable, observable, observe, reaction, runInAction, when } from \"mobx\"\nimport { shouldCompute } from \"mobx/dist/internal\"\nimport { Model } from \"./model\"\n\n\nexport default class Query<M extends Model> {\n\n    @observable items       : M[] = []       // TODO: do not allow to change items outside\n    @observable filters     : object = {}\n    @observable order_by    : string[] = []\n    @observable page        : number = 0\n    @observable page_size   : number = 50\n    @observable is_ready    : boolean = false\n    @observable error       : string = '' \n\n    private disposers = []\n    private disposer_objects = {}\n\n    constructor(model, filters?, order_by?, page?, page_size?) {\n        if (filters  ) this.filters = filters\n        if (order_by ) this.order_by = order_by\n        if (page     ) this.page = page\n        if (page_size) this.page_size = page_size\n        makeObservable(this)\n        this.disposers.push(autorun(async () => {\n            runInAction(() => this.is_ready = false)\n            try {\n                let data = await model.adapter.load(\n                    this.filters, \n                    this.order_by, \n                    this.page_size, \n                    this.page*this.page_size\n                    )\n                runInAction(() => this.items = data)\n            }\n            catch (e) {\n                runInAction(() => this.error = e)\n            }\n            runInAction(() => this.is_ready = true)\n        }))\n\n        debugger\n        this.disposers.push(observe(model.cache, (change: any) => {\n            if (change.type == 'add') {\n                let __id = change.name\n                let obj  = change.newValue\n\n                debugger\n                if (should_be_in_the_list(obj, this.filters))\n                    this.items.push(obj)\n\n                this.disposer_objects[__id] = reaction(\n                    () => {\n                        return should_be_in_the_list(obj, this.filters)\n                    }, \n                    (shold_be_in_the_list) => {\n                        let i = this.items.indexOf(obj)\n                        if (shold_be_in_the_list && i == -1)\n                            this.items.push(obj)\n                        if (!shold_be_in_the_list && i != -1)\n                            this.items.splice(i, 1)\n                    } \n                )\n            }\n\n            if (change.type == \"delete\") {\n                let __id = change.name\n                let obj  = change.oldValue\n                this.disposer_objects[__id]()\n                delete this.disposer_objects[__id]\n                let i = this.items.indexOf(obj)\n                if (i != -1)\n                    this.items.splice(i, 1)\n            }\n\n        }))\n    }\n\n    destroy() {\n        for(let disposer of this.disposers) disposer()\n    }\n}\n\nfunction should_be_in_the_list(obj, filters) {\n    if (Object.keys(filters).length) {\n        debugger\n        for(let key in filters) {\n            if (obj[key] != filters[key])\n                return false\n        }\n        return true\n    }\n    else\n        return true\n}","import { action, computed, makeObservable, observable, runInAction } from 'mobx'\nimport Adapter from './adapters/adapter'\nimport Query from './query'\n\n\nexport abstract class Model {\n\n    // this private static properties will be copied to real model in the model decorator\n    private static ids          : any[]\n    private static adapter      : Adapter<Model>\n    private static cache        : Map<string, Model>\n    private static fields       : {\n        [field_name: string]: {\n            decorator   : (obj: Model, field_name: string) => void,\n            settings    : any,\n            serialize   : any,\n            deserialize : any\n        }\n    }\n\n\n    static load(filter = {}, order_by = {}, page = 0, page_size = 50) {\n        return new Query(this, filter, order_by, page, page_size)\n    }\n\n    static clearCache() {\n        // we need it for run triggers on id fields \n        for (let obj of this.cache.values()) {\n            for (let id_field_name of this.ids) {\n                obj[id_field_name] = null\n            }\n        }\n    }\n\n    // TODO push it to utils\n    static __id(obj, ids: []) : string | null {\n        let id = '' \n        for (let id_name of ids) {\n            // if any id field is null then we should return null because id is not complite\n            if (obj[id_name] === null || obj[id_name] === undefined) \n                return null\n            id += `${obj[id_name]} :`\n        }\n        return id\n    }\n\n    private readonly _init_data\n    private disposers = new Map()\n\n    constructor(init_data?) {\n        // we have to save init data for detect changes\n        this._init_data = init_data ? init_data : {}\n    }\n\n    // build id string from ids fields and return it\n    @computed get __id() : string | null {\n        return Model.__id(this, this.model.ids)\n    }\n\n    // TODO: any is band-aid \n    get model() : any {\n        return this.constructor\n    }\n\n    // create or update object in the repo \n    async save() {\n        return this.model.adapter.save(this)\n    }\n\n    // delete object from the repo \n    async delete() {\n        await this.model.adapter.delete(this)\n        // reset ids\n        for(let id_name of this.model.ids)\n            this[id_name] = null\n    }\n\n    // add obj to the cache\n    @action inject() {\n        if (this.__id === null)                    \n            throw new Error(`Object should have id!`)\n        if (this.model.cache.has(this.__id)) {\n            debugger\n            throw new Error(`Object with id \"${this.__id}\" already exist in the cache of model: \"${this.model.name}\")`)\n        }\n        this.model.cache.set(this.__id, this)\n    }\n\n    // remove obj from the cache\n    @action eject() {\n        if (this.__id === null)\n            return                   \n        if (!this.model.cache.has(this.__id)) \n            throw new Error(`Object with id \"${this.__id}\" not exist in the cache of model: ${this.model.name}\")`)\n        this.model.cache.delete(this.__id)\n    }\n}\n\n\n// Decorator\nexport function model(constructor) {\n    var original = constructor\n\n    original.cache = observable(new Map())\n    // makeObservable(original, { cache: observable })\n\n    // the new constructor\n    let f : any = function (...args) {\n        let c : any = function () { return original.apply(this, args) }\n        c.__proto__ = original\n        c.prototype = original.prototype\n        let obj = new c()\n        makeObservable(obj)\n\n        // save default values from class declaration to init_data\n        for (let field_name in obj.model.fields) {\n            if (obj._init_data[field_name] === undefined && obj[field_name] !== undefined) {\n                obj._init_data[field_name] = obj[field_name]\n            }\n        }\n\n        // apply fields decorators\n        for (let field_name in obj.model.fields) {\n            obj.model.fields[field_name].decorator(obj, field_name)\n        }\n\n        runInAction(() => {\n            // push init_data to object \n            // ids should be the last\n            let ids = []\n            for (let field_name in obj._init_data) {\n                if (obj.model.ids && obj.model.ids.includes(field_name))\n                    ids.push(field_name)\n                else\n                    obj[field_name] = obj._init_data[field_name]\n            }\n            for (let field_name of ids) {\n                obj[field_name] = obj._init_data[field_name]\n            }\n        })\n\n        return obj\n    }\n\n    f.__proto__ = original\n    f.prototype = original.prototype   // copy prototype so intanceof operator still works\n    return f                      // return new constructor (will override original)\n}\n","import { Model } from '../model'\nimport Adapter  from './adapter'\n\n/*\n*/\n\nlet store = {}\n\nexport class LocalAdapter<M extends Model> implements Adapter<M> {\n    constructor(\n        private cls,\n        private store_name: string) {\n        store[store_name] = {}\n    }\n\n    async save(obj: M) : Promise<M> {\n        // create \n        if (obj.__id === null) {\n            // calculate and set new ID\n            let ids = [0]\n            for(let id of Object.keys(store[this.store_name])) {\n                ids.push(parseInt(id))\n            }\n            let max = Math.max.apply(null, ids)\n            for(let name_id of obj.model.ids) {\n                obj[name_id] = max + 1\n            }\n            store[this.store_name][obj.__id] = obj\n        }\n        // edit\n        else {\n            store[this.store_name][obj.__id] = obj\n        }\n        return obj\n    }\n    async delete(obj: M) : Promise<any> {\n        delete store[this.store_name][obj.__id]\n    }\n\n    load (where={}, order_by=[], limit=50, offset = 0) : Promise<M[]> {\n        throw('Not implemented')\n    }\n}\n\n// model decorator\nexport function local(api: string) {\n    return (cls) => {\n        let adapter = new LocalAdapter(cls, api)\n        cls.__proto__.adapter = adapter \n    }\n}\n","import { Model } from '../model'\nimport Adapter  from './adapter'\n\n/*\n*/\n\nexport class RestAdapter<M extends Model> implements Adapter<M> {\n    constructor(\n        private cls,\n        private http,\n        private api: string) {\n    }\n\n    async save(obj: M) : Promise<M> {\n        // gather data from obj\n        let data = {}\n        for(let field_name in obj.model.fields) {\n            if (obj[field_name] !== null) {\n                data[field_name] = obj[field_name]\n            }\n        }\n\n        if (obj.__id === null) {\n            // create \n            data = await this.http.post(`${this.api}/`, data)\n            // update values\n            for(let field_name in obj.model.fields) {\n                obj[field_name] = data[field_name]\n            }\n        }\n        else {\n            // edit\n            data = await this.http.put(`${this.api}/${obj.__id}/`, data)\n            // update values\n            for(let field_name in obj.model.fields) {\n                // do not touch the ids\n                if (!obj.model.ids.includes(field_name)) {\n                    obj[field_name] = data[field_name]\n                }\n            }\n        }\n        // push saved data to obj\n        return obj\n    }\n    async delete(obj: M) : Promise<any> {\n        return this.http.delete(`${this.api}/${obj.__id}/`)\n    }\n\n    async load (where={}, order_by=[], limit=50, offset = 0) : Promise<M[]> {\n        // TODO build query string \n        let query = ''\n\n        let data = await this.http.get(`${this.api}/?${query}`)\n\n        // init objects from data \n        let objs : M[] = []\n        for (let obj of data) {\n            objs.push(new this.cls(obj))\n        }\n        return objs\n    }\n}\n\n// model decorator\nexport function rest(http, api: string) {\n    return (cls) => {\n        let adapter = new RestAdapter(cls, http, api)\n        cls.__proto__.adapter = adapter \n    }\n}\n","import { observable, observe, intercept, extendObservable } from 'mobx'\n\n/*\n1. you can setup id only once!\nusing obj.id = x, new Obj({id: x}) or obj.save()\n\n2. save() has two behavior depend on id \n - id === undefined or null -> create object on remote storage and get it\n - id === some number       -> save object in remote storage \n\n3. if you want just load data to cache then you can use this \nnew Obj({id: x, ...})\n*/\n\nfunction field_ID (obj , field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // before changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && obj[field_name] !== null)\n            throw new Error(`You cannot change id field: ${field_name}. ${obj[field_name]} to ${change.newValue}`)\n        if (obj[field_name] !== null && change.newValue === null) {\n            try {\n                obj.eject()\n            }\n            catch (err) {\n                let ignore_error = `Object with id \"${obj.__id}\" not exist in the model cache: ${obj.model.name}\")`\n                if (err.name !== ignore_error)\n                    throw err\n            }\n        }\n        return change\n    })\n\n    // after changes\n    observe(obj, field_name, (change) => {\n        // if id is complete\n        if (obj.__id !== null) \n            obj.inject()\n    })\n\n}\n\n\nexport default function id(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.fields === undefined) model.fields = {}\n    if (model.ids    === undefined) model.ids = []\n\n    model.fields[field_name] = { decorator: field_ID }  // register field \n    model.ids.push(field_name)                          // register id\n\n}\n","import { extendObservable } from 'mobx'\n\n\n\nexport function field_field(obj, field_name) {\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n}\n\n\nexport default function field(cls, field_name: string) {\n    let model = cls.constructor\n    if (model.fields === undefined) model.fields = {}\n\n    model.fields[field_name] = { decorator: field_field }  // register field \n}\n","// import 'reflect-metadata'\nimport {intercept, observe, extendObservable, observable, autorun, when, reaction} from 'mobx'\n\nfunction field_foreign(obj, field_name) {\n    let edit_mode = false\n    let settings = obj.model.fields[field_name].settings\n    let foreign_model     = settings.foreign_model\n    let foreign_ids_names = settings.foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    reaction(\n        // watch on foreign cache for foreign object\n        () => {\n            let id = foreign_model.__id(obj, foreign_ids_names)\n            return id ? foreign_model.cache.get(id) : null\n        },\n        // update foreign field\n        (foreign_obj, prev, reaction) => {\n            obj[field_name] = foreign_obj ? foreign_obj : null \n        })\n\n    // Setter\n    // 1. checks before set new changes\n    intercept(obj, field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor == foreign_model.__proto__))\n            throw new Error(`You can set only instance of \"${foreign_model.__proto__.name}\" or null`)\n        return change\n    })\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let new_foreign_obj = change.newValue\n        let old_foreign_obj = change.oldValue\n\n        if (new_foreign_obj === old_foreign_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> A.b_id -> A.b -> A.b_id ...\n\n        edit_mode = true\n        try {\n            if (change.newValue === null) {\n                // if foreign set to null then reset ids on the obj\n                for (let id_name of foreign_ids_names) {\n                    obj[id_name] = null \n                }\n            }\n            else {\n                // if foreign set to obj then update ids from the obj's ids\n                let obj_ids = change.newValue.model.ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    // do not touch if it the same\n                    if (obj[foreign_ids_names[i]] != change.newValue[obj_ids[i]])\n                        obj[foreign_ids_names[i]]  = change.newValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // rollback changes!\n            if (change.oldValue === null) {\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = null \n                }\n            }\n            else {\n                let obj_ids = change.oldValue.model.ids\n                for (var i = 0; i < foreign_ids_names.length; i++) {\n                    obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n            throw e\n        }\n\n        // if foreign have the one then update the one\n        if (settings.one) {\n            if (old_foreign_obj) {\n                old_foreign_obj[settings.one] = null\n            }\n            if (new_foreign_obj) {\n                new_foreign_obj[settings.one] = obj \n            }\n        }\n\n    })\n}\n\n\nexport default function foreign(foreign_model: any, ...foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.constructor\n        if (model.fields === undefined) model.fields = {}\n        // register field \n        model.fields[field_name] = { \n            decorator: field_foreign,\n            settings: {\n                foreign_model: foreign_model,\n                // if it is empty then try auto detect it (it works only with single id) \n                foreign_ids_names: foreign_ids_names.length ? foreign_ids_names : [`${field_name}_id`]\n            } \n        } \n\n        // TODO finish it\n        // watch on the foreign cache \n        // if foreign obj was created then it should be attached to foreign\n        // if foreign obj was deleted then it should be removed from foreign\n        // e.i. update foreign obj when foreign ids was changed\n        // reaction(() => foreign_model.cache, (value, prev_value, reaction) => {\n        //     debugger\n        // })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_one(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.fields[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.fields[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: null \n    })\n\n    // 1. checks before set new changes\n    intercept(obj, <any>field_name, (change) => {\n        if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor === remote_model.__proto__))\n                throw new Error(`You can set only instance of \"${remote_model.__proto__.name}\" or null`)\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj, field_name, (change:any) => {\n        let old_remote_obj = change.oldValue\n        let new_remote_obj = change.newValue\n\n        if (new_remote_obj === old_remote_obj || edit_mode)\n            return  // it will help stop endless loop A.b -> B.a_id -> A.b -> B.a_id ...\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote obj\n            if (old_remote_obj) {\n                for (let id_name of remote_foreign_ids_name) {\n                    old_remote_obj[id_name] = null \n                }\n            }\n            // set foreign ids on the remote obj \n            if (new_remote_obj) {\n                let obj_ids = obj.model.ids \n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]] = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\n\nexport default function one(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.fields === undefined) model.fields = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.fields[field_name] = { \n            decorator: field_one,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.disposers.set(`one ${field_name}` ,autorun(() => {\n                        let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            // TODO: is it not bad?\n                            // if (obj[field_name])\n                            //     // TODO better name of error\n                            //     // TODO add test for this case\n                            //     throw ('One: bad')\n                            runInAction(() => { obj[field_name] = remote_obj })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.disposers.get(`one ${field_name}`)) {\n                        remote_obj.disposers.get(`one ${field_name}`)()\n                        remote_obj.disposers.delete(`one ${field_name}`)\n                    }\n                    let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) \n                        runInAction(() => { obj[field_name] = null })\n                    break\n            }\n        })\n    }\n}\n","import { intercept, observe, observable, extendObservable, reaction, autorun, runInAction } from 'mobx'\nimport { Model } from '../model'\n\n\nfunction field_many(obj: Model, field_name) {\n\n    let edit_mode = false\n    let remote_model            = obj.model.fields[field_name].settings.remote_model\n    let remote_foreign_ids_name = obj.model.fields[field_name].settings.remote_foreign_ids_names\n\n    // make observable and set default value\n    extendObservable(obj, {\n        [field_name]: []\n    })\n\n    // 1. checks before set new changes\n    intercept(obj[field_name], (change: any) => {\n        // TODO\n        // if (change.newValue !== null && !(change.newValue.constructor && change.newValue.constructor === remote_model.__proto__))\n        //         throw new Error(`You can set only instance of \"${remote_model.__proto__.name}\" or null`)\n\n        // TODO: if we push exist obj then ignore it? and not duplicate\n        // TODO: create a test for this case \n        // remote obj can be in the many \n        // for (let new_remote_obj of change.added) {\n        //     const i = obj[field_name].indexOf(new_remote_obj)\n        //     if (i == -1)\n        //         throw new Error(`\"${new_remote_obj.model.name}\" id:\"${new_remote_obj.__id}\" alredy in many \"${obj.model.name}\" id:\"${field_name}\"`)\n        // }\n        return change\n    })\n\n    // 2. after changes run trigger for \"change foreign_id\"\n    observe(obj[field_name], (change:any) => {\n        if (change.type !== 'splice')\n            return \n\n        let old_remote_objs = change.removed\n        let new_remote_objs = change.added\n\n        edit_mode = true\n        try {\n            // remove foreign ids on the old remote objs\n            for(let old_remote_obj of old_remote_objs)\n                for (let id_name of remote_foreign_ids_name)\n                    old_remote_obj[id_name] = null \n            // set foreign ids on the remote objs \n            let obj_ids = obj.model.ids \n            for(let new_remote_obj of new_remote_objs) {\n                for (var i = 0; i < remote_foreign_ids_name.length; i++) {\n                    // do not touch if it the same\n                    if (new_remote_obj[remote_foreign_ids_name[i]] != obj[obj_ids[i]])\n                        new_remote_obj[remote_foreign_ids_name[i]]  = obj[obj_ids[i]]\n                }\n            }\n            edit_mode = false\n        }\n        catch(e) {\n            // TODO: we need to test rallback\n            // // rollback changes!\n            // if (change.oldValue === null) {\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = null \n            //     }\n            // }\n            // else {\n            //     let obj_ids = change.oldValue.model.ids\n            //     for (var i = 0; i < foreign_ids_names.length; i++) {\n            //         obj[foreign_ids_names[i]] = change.oldValue[obj_ids[i]]\n            //     }\n            // }\n            // edit_mode = false\n            // throw e\n        }\n    })\n}\n\nexport default function many(remote_model: any, ...remote_foreign_ids_names: string[]) {\n    return function (cls: any, field_name: string) {\n        let model = cls.prototype.constructor\n        if (model.fields === undefined) model.fields = {}\n        // if it is empty then try auto detect it (it works only with single id) \n        remote_foreign_ids_names = remote_foreign_ids_names.length ? remote_foreign_ids_names: [`${model.name.toLowerCase()}_id`]\n        model.fields[field_name] = { \n            decorator: field_many,\n            settings: {\n                remote_model: remote_model,\n                remote_foreign_ids_names: remote_foreign_ids_names\n            } \n        } \n        \n        // watch for remote object in the cache \n        observe(remote_model.cache, (remote_change: any) => {\n            let remote_obj\n            switch (remote_change.type) {\n                case 'add':\n                    remote_obj = remote_change.newValue\n                    remote_obj.disposers.set(`many ${field_name}` ,autorun(() => {\n                        let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                        if (obj) {\n                            const i = obj[field_name].indexOf(remote_obj)\n                            if (i == -1)\n                                runInAction(() => { obj[field_name].push(remote_obj) })\n                        }\n                    }))\n                    break\n                case 'delete':\n                    remote_obj = remote_change.oldValue\n                    if (remote_obj.disposers.get(`many ${field_name}`)) {\n                        remote_obj.disposers.get(`many ${field_name}`)()\n                        remote_obj.disposers.delete(`many ${field_name}`)\n                    }\n                    let obj =  model.cache.get(model.__id(remote_obj, remote_foreign_ids_names))\n                    if (obj) {\n                        const i = obj[field_name].indexOf(remote_obj)\n                        if (i > -1)\n                            runInAction(() => { obj[field_name].splice(i, 1); })\n                    } \n                    break\n            }\n        })\n    }\n}"],"names":["model","filters","order_by","page","page_size","Object","this","makeObservable","disposers","push","autorun","runInAction","_this","is_ready","adapter","load","data_1","_a","items","error","e_1","observe","cache","change","type","__id","name","obj_1","newValue","should_be_in_the_list","disposer_objects","reaction","shold_be_in_the_list","i","indexOf","splice","obj","oldValue","_b","__values","disposer","__decorate","observable","keys","length","key","init_data","Map","_init_data","filter","Query","_c","values","_e","ids","id","ids_1","id_name","undefined","Model","constructor","save","delete","_d","Error","has","set","computed","action","original","f","_i","args","c","apply","__proto__","prototype","field_name","fields","decorator","includes","ids_2","store","cls","store_name","parseInt","max","Math","name_id","where","limit","offset","local","api","LocalAdapter","http","data","post","put","get","objs","rest","RestAdapter","field_ID","extendObservable","intercept","eject","err","ignore_error","inject","field_field","field","field_foreign","edit_mode","settings","foreign_model","foreign_ids_names","foreign_obj","prev","new_foreign_obj","old_foreign_obj","foreign_ids_names_1","obj_ids","e","one","foreign","field_one","remote_model","remote_foreign_ids_name","remote_foreign_ids_names","old_remote_obj","new_remote_obj","remote_foreign_ids_name_1","toLowerCase","remote_change","remote_obj","field_many","old_remote_objs","removed","new_remote_objs","added","old_remote_objs_1","new_remote_objs_1","many","i_1"],"mappings":"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"}